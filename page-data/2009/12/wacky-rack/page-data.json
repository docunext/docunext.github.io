{"componentChunkName":"component---src-templates-blog-post-js","path":"/2009/12/wacky-rack/","result":{"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>I love testing different combinations of software and so its should come as no surprise that Ruby, Rack, and the plentiful middleware for it makes for plenty of testing.</p>\n<p>Today I was testing Regdel with Unicorn, and I ran into a problem with Rack::Lint. For some reason, something was causing a Content-Length header of zero to be sent.</p>\n<p>I thought it might have been rack-docunext-content-length, but thankfully, no, that was not the cause.</p>\n<p>I realized that Unicorn was defaulting to a development environment and was loading the following Rack::Middleware:</p>\n<pre class=\"sh_ruby\">\n  case ENV[\"RACK_ENV\"]\n  when \"development\"\n    Rack::Builder.new do\n      use Rack::CommonLogger, $stderr\n      use Rack::ShowExceptions\n      use Rack::Lint\n      run inner_app\n    end.to_app\n  when \"deployment\"\n    Rack::Builder.new do\n      use Rack::CommonLogger, $stderr\n      run inner_app\n    end.to_app\n  else\n    inner_app\n  end\n</pre>\n<p>I believe Rack::Lint was getting called before anything else. Maybe that was the cause? I'm not sure, but if I use Rack::Lint in Regdel, there are no problems, and there is not Content-Length header of zero getting sent to my client.</p>\n<p>I'm now launching Unicorn like this:</p>\n<pre class=\"sh_sh\">\n/var/lib/gems/1.8/gems/unicorn-0.95.3/bin/unicorn --env none -l 3000\n</pre>","fields":{"slug":"/2009/12/wacky-rack/"},"frontmatter":{"title":"Wacky Rack","date":"December 27th, 2009","tags":"rack,unicorn"}}},"pageContext":{"slug":"/2009/12/wacky-rack/"}},"staticQueryHashes":["3159585216","3388129809"]}