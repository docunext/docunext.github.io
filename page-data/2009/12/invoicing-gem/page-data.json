{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2009/12/invoicing-gem/",
    "result": {"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>I'm reviewing the invoicing gem. Its nice that the author has scoped it well, meaning that it doesn't try to do everything or be everything to everyone.</p>\n<p>Apparently it ties in well with Rails, but I'm not too familiar with Rails so that doesn't help me much. On top of that, I think it depends upon ActiveRecord, whereas I've been learning DataMapper. Doh!</p>\n<p>I like the idea that it can purportedly plug into different applications though.</p>\n<p>NOTE: The invoicing gem is very well commented. Here's a cool example:</p>\n<p>If I read it correctly, it uses ActiveRecord's ability to inherit object classes. Heh - check out this comment:</p>\n<blockquote>Purists of object-oriented programming will most likely find this appalling</blockquote>\n<p>I'm not sure what to make of this yet, other than I find it interesting. DataMapper supports single-table inheritance as well, though I've only used it with Regdel for Entry Amounts:</p>\n<pre class=\"sh_ruby\">\nclass Credit &lt; Amount; end\nclass Debit &lt; Amount; end\n</pre>\n<p>This way I get to easily split entry amounts into credits or debits. It seems solid enough, but I' wary to extend object classes too far or wide.</p>","fields":{"slug":"/2009/12/invoicing-gem/"},"frontmatter":{"title":"Invoicing Gem","date":"December 24th, 2009","tags":"ruby"}}},"pageContext":{"slug":"/2009/12/invoicing-gem/"}},
    "staticQueryHashes": ["3159585216","758480095"]}