{"componentChunkName":"component---src-templates-blog-post-js","path":"/2009/12/behavior-driven-development/","result":{"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>Behavior Driven Development (BDD) is an awesome paradigm that I've recently learned about while transitioning to Ruby as my primary development language.</p>\n<p>I'm getting familiar with a couple BDD frameworks available for Ruby:</p>\n<ul>\n<li>RSpec</li>\n<li>Cucumber</li>\n</ul>\n<p>If I understand correctly, these two frameworks can actually work in concert with each other.</p>\n<p>The application I'm starting to use BBD with is called <a href=\"http://www.regdel.com/\">Regdel, an open source bookkeeping program written in Ruby</a>, and here's an example of a very simple RSpec test:</p>\n<pre class=\"sh_ruby\">\n  it \"should respond to /journal/0\" do\n    get '/journal/0'\n    last_response.should be_ok\n  end\n</pre>\n<p>This test also leverages Rack::Test, because Regdel is a Sinatra application, and like most Ruby frameworks, Sinatra is a Rack-compatible framework. To \"test the tests\", I'm using Rake to run the tests, and using Rcov, a code coverage tool, to measure how much of the application is getting tested.</p>\n<p>Cucumber takes the idiom further, by defining full-features instead of simple functions. I haven't quite gotten there yet with Regdel, but another bookkeeping project, <a href=\"http://github.com/snl/bookkeeper\">Bookkeeper</a>, uses Cucumber so that may be a good way to learn more about it.</p>\n<p>With regards to the software development life cycle in general, I expect that BDD will have a dramatic effect on the quality and robustness of software that it produces, while maintaining the rapid speed that agile development practices support.</p>\n<p>In my previous experiences as an agile \"dogfooding\" developer, I would test software by using it, modifying functionality and implementing new features along the way. That works fine most of the time, but there is a substantial downfall: the lack of comprehensive regression testing, i.e. checking to make sure changes to one part of a program do not break other parts of it. I haven't yet witnessed it myself, but I expect that the combination of BDD and comprehensive code coverage testing to greatly alleviate, if not eliminate that downfall. :-)</p>","fields":{"slug":"/2009/12/behavior-driven-development/"},"frontmatter":{"title":"Behavior Driven Development","date":"December 26th, 2009","tags":"ruby,sinatra,testing"}}},"pageContext":{"slug":"/2009/12/behavior-driven-development/"}},"staticQueryHashes":["3159585216","758480095"]}