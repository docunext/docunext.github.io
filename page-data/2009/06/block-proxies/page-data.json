{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2009/06/block-proxies/",
    "result": {"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>I found this mod_rewrite configuration at <a href=\"http://perishablepress.com/press/2008/04/20/how-to-block-proxy-servers-via-htaccess/\">Perishable Press</a>:</p>\n<pre>RewriteEngine on\nRewriteCond %{REQUEST_METHOD} POST\nRewriteCond %{HTTP:VIA}                 !^$ [OR]\nRewriteCond %{HTTP:FORWARDED}           !^$ [OR]\nRewriteCond %{HTTP:USERAGENT_VIA}       !^$ [OR]\nRewriteCond %{HTTP:X_FORWARDED_FOR}     !^$ [OR]\nRewriteCond %{HTTP:PROXY_CONNECTION}    !^$ [OR]\nRewriteCond %{HTTP:XPROXY_CONNECTION}   !^$ [OR]\nRewriteCond %{HTTP:HTTP_PC_REMOTE_ADDR} !^$ [OR]\nRewriteCond %{HTTP:HTTP_CLIENT_IP}      !^$\nRewriteRule ^(.*)$ - [F]\n</pre>\n<p>Then I added this:</p>\n<pre>RewriteCond %{REQUEST_METHOD} POST\n</pre>\n<p>at the beginning. I might remove that as the post another post about blocking proxies said that some of them strip out my ads and insert their own. That's not cool!</p>\n<p>But one problem with all this: since I use Varnish, the legitimate requests have some of those headers already. I'm going to try and come up with a regular expression to allow forwarding from my Varnish proxies, but block other ones. This will also help with <a href=\"http://www.docunext.com/\">mod_extract_forwarded</a>!</p>","fields":{"slug":"/2009/06/block-proxies/"},"frontmatter":{"title":"Block Proxies","date":"June 18th, 2009","tags":null}}},"pageContext":{"slug":"/2009/06/block-proxies/"}},
    "staticQueryHashes": ["2191495970","4224293195"]}