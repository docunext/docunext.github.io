{"componentChunkName":"component---src-templates-blog-post-js","path":"/2009/02/lua-and-xml/","result":{"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>Though a little hard to find, there are some nice xml projects in lua. Here are two that caught my attention:</p>\n<p><a href=\"http://etree.luaforge.net/\">http://etree.luaforge.net/</a> - includes the ability to output a lua data structure as XML. Nice, but uses Expat. Expat is fine, but most of the bindings I use these days connect with libxml2.</p>\n<p><a href=\"http://asbradbury.org/projects/lua-xmlreader/\">http://asbradbury.org/projects/lua-xmlreader/</a> - Like the name suggests, implements the xmlreader functionality of libxml2. Its a great way of dealing with XML, but I'm not sure if it includes an output function. The author has also written lua cdb bindings - that is awesome.</p>\n<p>While not a lua library or project, here's a post about lua tables and xml which includes an XSLT stylesheet which can convert XML into a lua data structure, very interesting!</p>\n<p><a href=\"http://www.latenightpc.com/blog/archives/2006/02/06/converting-simple-xml-to-lua-tables-with-xslt\">http://www.latenightpc.com/blog/archives/2006/02/06/converting-simple-xml-to-lua-tables-with-xslt</a></p>\n<p>There are also some terrific SQL libraries, the one I'm trying out is even a database abstraction layer - LuaSQL. With the help of their examples, this actually works:</p>\n<pre class=\"lua\">require \"luasql.sqlite3\"\nenv = assert (luasql.sqlite3())\ncon = assert (env:connect(\"luasql-test\"))\nres = con:execute\"DROP TABLE metadata\"\nres = assert (con:execute[[  CREATE TABLE metadata(    id  int(11),    key varchar(50),    value varchar(50)  )]])\nlist = {  { id=1, key=\"month\", value=\"May\", },}\nfor i, p in pairs (list) do  res = assert (con:execute(string.format([[    INSERT INTO metadata    VALUES ('%s', '%s', '%s')]], p.id, p.key, p.value)  ))\nend\ncur = assert (con:execute\"SELECT key,value from metadata\")\nrow = cur:fetch ({}, \"a\")\nwhile row do  print(string.format(\"Key: %s, Value: %s\", row.key, row.value))  row = cur:fetch (row, \"a\")\nend\ncur:close()\ncon:close()\nenv:close()</pre>","fields":{"slug":"/2009/02/lua-and-xml/"},"frontmatter":{"title":"Lua XML and SQL","date":"February 18th, 2009","tags":null}}},"pageContext":{"slug":"/2009/02/lua-and-xml/"}}}