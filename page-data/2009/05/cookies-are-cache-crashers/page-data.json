{"componentChunkName":"component---src-templates-blog-post-js","path":"/2009/05/cookies-are-cache-crashers/","result":{"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>Its true - <i><b>cookies are cache crashers</b></i>.</p>\n<p>I learned about this from my favorite reverse proxy cache: varnish. The varnish docs speak about how cookies will cause content to not get cached; its part of the http specification.</p>\n<p>I had previously never really used cookies, but then I found that they were a helpful component to my efforts in combating blog spam as well as analyzing my sites' traffic patterns.</p>\n<p>So nowadays I've been trying to keep all the content that I <i>really</i> want to get cached, namely images, under a separate path than the path for which my servers issue a cookie.</p>\n<p>For example, I'm setting my blog cookies with \"/blog/\" as the path, and then putting any images I use inside the \"/s/\" folder. Therefore the image requests are not sent with any cookies. Yay!</p>\n<p><font style=\"font-size: 1.25em;\"><b>Simple Comment Spam Defense</b></font>\nThis does not catch every automated comment attempt, but it does catch the lamer ones. Its a simple Apache mod_rewrite pattern which checks if a cookie exists, if not, it sets one. Then it tests for a POST request. If there is a POST request, it checks for the cookie. If the cookie is missing, it blocks the request. Simple and effective, just how I like it.</p>\n<pre>RewriteCond %{REQUEST_URI} ^/blog\nRewriteCond %{REQUEST_URI} !.(css|jpg|gif|png)\nRewriteCond %{HTTP_USER_AGENT} (MSIE|Mozilla|Opera|ELinks)\nRewriteCond %{HTTP_USER_AGENT} !(Yahoo|Googlebot|msn-bot)\nRewriteCond %{HTTP_COOKIE} !upost=y\nRewriteRule . - [CO=upost:y:%{HTTP_HOST}:6000:/blog/:0:1]\n\nRewriteCond %{REQUEST_METHOD} POST\nRewriteCond %{REQUEST_URI} ^/(forums|blog)\nRewriteCond %{HTTP_USER_AGENT} !(MSIE|Mozilla|Opera|ELinks) [OR]\nRewriteCond %{HTTP_COOKIE} !upost\nRewriteRule . - [F,L]\n</pre>\n<p>There's a little more going on there, but hopefully I've explained it well enough. I'm aware of some drawbacks to this approach: namely that not everyone accepts cookies, and I wouldn't be surprised if there were other drawbacks as well. However, the barrage of automated blog spammers has made this a necessity. Some still get through!</p>\n<p><font style=\"font-size: 1.25em;\"><b>Varnish VCL</b></font>\nThere are still some ways around the cookie issue with Varnish. In sub vcl_recv:</p>\n<pre>\n&nbsp;&nbsp;&nbsp; if (req.url ~ \"^/s/\") {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unset req.http.cookie;\n&nbsp;&nbsp;&nbsp; }\n</pre>\n<p>The \"^/s/\" is specific to my configuration. Other configurations will likely vary.</p>\n<p>and in sub vcl_fetch:</p>\n<pre>\nsub vcl_fetch {\n&nbsp;&nbsp;&nbsp; if (req.url ~ \"\\.(png|gif|jpg|swf|css|js)$\") {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unset obj.http.set-cookie;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp; if (req.url ~ \"^/s/\") {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unset obj.http.set-cookie;\n&nbsp;&nbsp;&nbsp; }\n</pre>\n<p> Again, this is specific to my configuration.</p>","fields":{"slug":"/2009/05/cookies-are-cache-crashers/"},"frontmatter":{"title":"Cookies are Cache Crashers","date":"May 26th, 2009","tags":null}}},"pageContext":{"slug":"/2009/05/cookies-are-cache-crashers/"}},"staticQueryHashes":["3159585216","758480095"]}