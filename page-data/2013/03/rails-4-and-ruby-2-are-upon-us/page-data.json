{"componentChunkName":"component---src-templates-blog-post-js","path":"/2013/03/rails-4-and-ruby-2-are-upon-us/","result":{"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>I took some time off from Rails development to try out Golang (it rocks), but\nnow I'm back on the tracks and am digging into Rails 4 beta fresh out the oven\nand Ruby 2 which coincidentally reached a production status. Here's a few items\nI've noticed:</p>\n<ol>\n<li>Using rubygems with Ruby 2 seems phenomenally slower than with 1.9.3; has\nanyone else noticed? Is that going away soon (I hope!)?</li>\n<li>JBuilder is cool - it can be used to create complex json output in a\nmanageable manner. If you've tried yajl with tilt you might dig this.</li>\n<li>Perhaps the coolest new feature I've found in Rails 4 is native support for\nhstore in Postgres. Postgres has a hash datatype that stores only strings as\nkeys and values; the Rails 4 interface to it is spot on. I'll go into more\ndetail on this killer app.</li>\n</ol>\n<h3>Rails 4 and Hstore from Postgres 9.2</h3>\n<p>The combination mentioned above is truly a magical pairing: its both SQL and\nNoSQL at the same time in a single ORM for rails. If you're familiar with the\nActiveRecord serialize method, this is quite similar - but its a native datatype\nin Postgres <em>and</em> it can be arbitrarily indexed and queried upon. That's the\nhook from pg; on the Rails side its, like I said, spot on. The attribute is\ntreated exactly like a Ruby hash.\nAnother interesting new feature of Postgres 9.2 is the json data type; it adds\nformat validation for input as well as a couple of handle transformation\nfunctions; returning the results of a row query in json format. Rails likely\nwon't get into that detailed feature, but I sure will. And there is PL/v8,\nadding javascript as a procedural language.</p>\n<h1>Sweet.</h1>\n<p><a href=\"http://schneems.com/post/19298469372/you-got-nosql-in-my-postgres-using-hstore-in-rails\">http://schneems.com/post/19298469372/you-got-nosql-in-my-postgres-using-hstore-in-rails</a></p>\n<h3>Rails 4 TurboLinks or Ember?</h3>\n<p>I'm not sure how I feel about TurboLinks yet. On one hand, I see it as\na stop-gap measure towards the almighty single page app; on the other hand, I do\nappreciate the speed and responsiveness boosts. The Rails\ncommunity is just shy of embracing the HTML5 history API. I recently tried\nbuilding a single page application with Rails 3.2 and Ember and Rails just felt\ntoo big. It felt like Sinatra or Padrino would have been a better, simpler fit.\nI would much prefer if the\nember-data layer stabilized and began to play nicely with the Rails and\nActiveRecord superpower of a JSON API that has backwards compatibility to\na multi-page website. All I gotta say is <strong>remember dbslayer</strong>.</p>\n<h3>Upgrading a Rails 3.2 App to Rails 4</h3>\n<p>This was surprisingly simple, though I am cheating with the protected_attributes\ngem (not as awesome as StrongParameters). Hmm, this is interesting:</p>\n<pre><code>DEPRECATION WARNING: The following options in your User.has_many :vehicles\ndeclaration are deprecated: :include. Please use a scope block instead. For\nexample, the follow\ning:\n\n  has_many :spam_comments, conditions: { spam: true }, class_name: 'Comment'\n\nshould be rewritten as the following:\n\n  has_many :spam_comments, -> { where spam: true }, class_name: 'Comment'\n</code></pre>\n<p>That <code>-></code> syntax is unfamiliar. Not a big deal, right?! Anyone for\nbike sheds? I'm also hitting the fact that they gemified a lot of the guts of\n3.2, like no caching. Not a big deal, either; I was only using it in one place\nto cache an action. I definitely agree with moving those components to gems.</p>\n<hr>\n<pre><code>( Post continued several days later on March 6th )\n</code></pre>\n<h3>Rails 4 Encrypted and Signed Session Cookies</h3>\n<p>I put together a simple Rails auth system over the weekend and discovered\nencrypted and signed cookies. These are really cool, because:</p>\n<ol>\n<li>They can't be tampered with, because they are signed</li>\n<li>They can't be read, because they are encrypted</li>\n</ol>\n<p>These factors allow the cookie alone to serve as the storage for the session; no\nneed for file system storage like PHP or a database query for every request.\nHowever, the store is limited to 4k, so if you need more you can switch on the\nActiveRecord session storage gem.</p>\n<p>Along the lines of security, but not specific to Rails 4, is the fact that Rails\nhas HTTP digest authentication in it. I'm a fan of digest authentication.</p>\n<hr>\n<pre><code>( Post continued a couple weeks later on March 24th )\n</code></pre>\n<h3>Rails4 Controller Concerns</h3>\n<p><code>Model Concerns</code> in Rails3 are straightforward, especially when used with\n<code>Rails Engines</code>; they enable developers to override and/or decorate other\nmodels in the interests of reusable, DRY code. With\n<code>ActiveSupport::Concern</code>, the interface to Ruby's metaprogramming\ncapabilities is simple and <em>manageable</em>. Here's and example from svxbox,\na \"junk drawer\" of code that's collected in one of my GitHub repos:</p>\n<pre><code>module SvxBox::Roary\n  # Overrides the ActiveRecord::Base#find method to find by a speficied param.\n  #\n  #   class Something &#x3C; ActiveRecord::Base\n  #     include SvxBox::Roary\n  #     to_param_suffix :name\n  #   end\n  extend ActiveSupport::Concern\n\n  included do\n    cattr_accessor :param_suffix\n    validates :param_key, :presence => true, :uniqueness => true, :if => :param_key_attribute?\n  end\n\n  # ... snip ...\n\n  module ClassMethods\n\n    # ... snip ...\n\n    def find(key)\n      return super if !self.attribute_method?(:param_key)\n      begin\n        where(\"param_key = ?\", key.to_s).first!\n      rescue ActiveRecord::RecordNotFound\n        super\n      end\n    end\n  end\n\n  def to_param\n    return self.param_key if param_key_attribute?\n    super\n  end\nend\n</code></pre>\n<p>This module, when included in an A/R class, evaluates some code to within the\ncontext class definition, adds/overrides class methods, and adds/overrides\ninstance methods, the latter of which would be familiar to those who have used\nRuby Modules in the traditional sense.\nDescendants of <code>ActionController::Base</code> are full-fledged Ruby classes;\nthey too can benefit from <code>ActiveSupport::Concern</code>. Here's how I'm using\nit to encapsulate extradomain-logic and clean up the ApplicationController: </p>\n<pre><code>require 'active_support/concern'\n\nmodule ControllerJavascript\n  # Returns \"application\" and controller-specific file if it exists.\n  #\n  #   &#x3C;%= javascript_include_tag javascript_includes %>\n  # \n  # Thanks to the AssetPipeline and blog.nikoroberts.com/post/45834700876\n  # Should work with Rails 3.2 and 4.0.\n  extend ActiveSupport::Concern\n  include AbstractController::Helpers\n\n  APPLICATION = \"application\".freeze\n\n  included do\n    helper_method :javascript_includes\n  end\n\n  def javascript_includes\n    if controller_javascript?\n      return APPLICATION, controller\n    else\n      return APPLICATION\n    end\n  end\n\n  private\n\n  def controller_javascript?\n    !Rails.application.assets.find_asset(controller, ext: 'js').nil? &#x26;&#x26;\n      controller != APPLICATION\n  end\n\n  def controller\n    @controller ||= params[\"controller\"]\n  end\nend\n</code></pre>\n<p>The simplicity of this pattern kicks some serious butt. I'm also using this for\na Rails implementation of nginx's secure<em>link module. It will eventually\nbecome a gem and its awesome how little I have to do to abstract it out while\nI fine-tune the design. The _clean</em> inclusion of small chunks of reusable code\nwithin my codebase helps with the dependency soup I've encountered with Rails\nin the past (<a href=\"http://www.docunext.com/2013/01/between-the-empire-and-the-rebellion/\">see my post about Golang dependency freedom</a>).</p>\n<p>Rails Engines are awesome in certain cases, in others, overkill. Concerns like\nthis fill a niche for Rails plugins as gems when an Engine is too much. Last\nyear I authored a few Rails3 engines and this year I plan to refactor a few\ninto simpler non-Engine plugins. One of them is Invytr, a\ngeneralized invitation system, and it will be better off smaller and simpler.\nThankfully Rails4 retains the <code>rails plugin new my_plugin</code> generator\n(though vendor/plugins is gone from Rails4). Also, since Rails logically\ncontinues to play nicely with Rack, rubygem libraries that include base\nfunctionality as Rak middleware can easily support multiple frameworks besides\nRails, such as Sinatra, Padrino, or Rackup. <a href=\"https://github.com/peter-murach/rack-policy\">Rack Policy</a> is a\ngood example of such a gem.</p>\n<h3>Signed Cookies Serializer</h3>\n<p><code>ActionDispatch::Cookies::SignedCookieJar</code> uses\n<code>ActiveSupport::MessageVerifier</code> to work its magic. Verifier accepts a\nserializer in the initialization options hash, but alas that's not configurable\nfor use with the signed cookie jars API built into Rails. Here's the monkey\ninitializer I use:</p>\n<pre><code>module ActionDispatch\n  class Cookies\n    SignedCookieJar.class_eval do \n      def initialize(parent_jar, key_generator, options = {})\n        @parent_jar = parent_jar\n        @options = options\n        secret = key_generator.generate_key(@options[:signed_cookie_salt])\n        @verifier   = ActiveSupport::MessageVerifier.new(secret, digest: 'SHA256', serializer: JSON)\n      end\n    end\n  end\nend\n</code></pre>\n<p>I hope that becomes configurable at some point. Marshal may be the more space\nefficient serializer, but for general, non-session cookies, JSON is far more\nportable. Besides, Base64 encoded data has approximately 33% overhead, so it\nmay just be a losing battle. Also, Rails depends on MultiJson, providing more\ncontrol over serialization. When it comes to encrypted session cookies, not\nas much of a big deal because its less likely that they'll need to be portable,\nbut judging by the following links, this needs to be configurable:</p>\n<ul>\n<li><a href=\"https://gist.github.com/jeffyip/4091166\">https://gist.github.com/jeffyip/4091166</a> Rails session cookies with JSON</li>\n<li><a href=\"https://gist.github.com/wvanbergen/1220401\">https://gist.github.com/wvanbergen/1220401</a> Rails compatible Node.js verifier</li>\n<li><a href=\"http://blog.ericrichardson.com/2012/03/1786-making-django-and-rails-play-nice-part-2\">http://blog.ericrichardson.com/2012/03/1786-making-django-and-rails-play-nice-part-2</a></li>\n</ul>\n<h3>rbenv, Rails4, Ruby2, Ruby1.9, and Debian / Ubuntu</h3>\n<p>For one of my websites, I use rbenv, Debian, Rails4 and Ruby2 in development\nand run Ubuntu, Rails4 and system Ruby1.9 in production and its working fine.\nIn production, I'm also using gems provided by apt-get. Its only been about a\nmonth so far, but I like it so far. I likely need to place a hold on those\npackages, come to think of it. Anyway, I'll share how I did it.</p>\n<p>The rubygems-integration via apt-get makes the <code>gem</code> command recognize gems\nfrom apt-get. After that, its just a matter of finding gems in the Debian /\nUbuntu repos that are compatible with Rails4 dependencies. I've found these:</p>\n<pre><code>gem 'pg', '0.13.2'\ngem 'erubis', '2.7.0'\ngem 'tzinfo', '0.3.33'\ngem 'bcrypt-ruby', '3.0.1'\ngem 'yajl-ruby', '1.1.0'\n</code></pre>\n<p>The yajl, bcrypt, and pg gems are nice to get via apt because I don't have\nto install a compiler tool chain. It seems that the friction between Debian\nand Rubygems may have subsided, but I'm not counting my chickens yet.</p>\n<h3>Appendix</h3>\n<h4>Rails 4 Queue</h4>\n<p>This looked cool, but it was removed late 2012:</p>\n<p><a href=\"https://github.com/rails/rails/commit/775829869e23666e114edbe8d6d3ff08d5d71025\">https://github.com/rails/rails/commit/775829869e23666e114edbe8d6d3ff08d5d71025</a></p>\n<h4>ActiveModel::Model</h4>\n<p>The author of active_attr said it was \"what was missing\" from <code>ActiveModel</code>\nand I agreed. Thankfully, in Rails4, its in there.</p>\n<h4>Changes to Sprockets</h4>","fields":{"slug":"/2013/03/rails-4-and-ruby-2-are-upon-us/"},"frontmatter":{"title":"Rails 4 and Ruby 2 Are Upon Us","date":"March 1st, 2013","tags":null}}},"pageContext":{"slug":"/2013/03/rails-4-and-ruby-2-are-upon-us/"}},"staticQueryHashes":["3159585216","758480095"]}