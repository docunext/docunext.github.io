{"componentChunkName":"component---src-templates-blog-post-js","path":"/2010/02/looking-for-memory-leaks-in-sinatra-applications/","result":{"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>I like fixing things, so tracking down memory leaks and patching them is fun for me.</p>\n<p>In the past I've done this using GTop in <a href=\"http://www.aortica.com/blog/\">Aortica</a> (a port of <a href=\"http://www.nexista.org/blog/\">Nexista</a> to Perl):</p>\n<pre class=\"sh_perl\">\n    my $mem = GTop->new->proc_mem($$)->share/1024;\n    my $proc_mem = GTop->new->proc_mem($$)->size/1024;\n    my $diff     = $proc_mem - $mem;\n    my $shared   = GTop->new->proc_mem($$)->vsize/1024;\n    my $memory = \" Shared: \".$mem.\" Total: \".$proc_mem.\" PID: \".$$ ;\n</pre>\n<p>I can't find an exact match for GTop in Ruby, so I might just use the command line based top for now. I can use it to monitor a unicorn process id and watch if the memory it uses grows. It can even be run from within Sinatra:</p>\n<pre class=\"sh_ruby\">\nget '/runtime/info' do\n    `pmap #{Process.pid} | tail -1`[10,40].strip\nend\n</pre>\n<h4>Related</h4>\n<p>The \"<a href=\"http://god.rubyforge.org/\">God</a>\" process monitor caught my attention. Its way more than I am looking for at the moment. It even looks like it might be able to replace how I'm using daemontools.</p>","fields":{"slug":"/2010/02/looking-for-memory-leaks-in-sinatra-applications/"},"frontmatter":{"title":"Looking for Memory Leaks in Sinatra Applications","date":"February 26th, 2010","tags":"sinatra"}}},"pageContext":{"slug":"/2010/02/looking-for-memory-leaks-in-sinatra-applications/"}}}