{"componentChunkName":"component---src-templates-blog-post-js","path":"/2010/12/rails-tests-and-rcov-best-practices/","result":{"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>Yesterday I spent a good amount of time writing and updating tests for a Ruby on Rails application.</p>\n<p>Besides being beneficial to the project, it was an excellent process to get an overall view of rails in general.</p>\n<p>Let me be more specific. At the onset of the project, the goals were not well defined. With that in mind, I rapidly prototyped a concept with scaffolds. Once I got a feel for the app's functionality, I started to refined and reorganize the structure of the controllers and views.</p>\n<p>As the codebase matured, there remained a lot of cruft stubs that had been created by the scaffolding generators. Thanks to Rcov, I was able to review what code was not getting tested by my required functionality and then remove it.</p>\n<p>At the end of the day, I achieved 80% coverage. Not bad! The remaining coverage involves users and sessions, and I plan to test that at some point as well. For now, I don't mind missing it.</p>\n<h2>Ruby on Rails Testing Best Practices</h2>\n<ul>\n<li>Test. Seriously, test.</li>\n<li>Use fixtures. They are often needed to actually test ActiveRecord associations.</li>\n<li>Use Rcov. Its awesome! <tt>rake rcov</tt></li>\n</ul>\n<h4>Rcov</h4>\n<p>I put this in my Rakefile:</p>\n<pre class=\"sh_ruby\">\nbegin\n  require 'rcov/rcovtask'\n  Rcov::RcovTask.new do |test|\n    test.libs << 'test'\n    test.pattern = 'test/**/*_test.rb'\n    test.verbose = true\n  end\nrescue LoadError\n  task :rcov do\n    abort \"RCov is not available. In order to run rcov, you must: sudo gem install spicycode-rcov\"\n  end\nend\n</pre>\n<h4>Test::Unit</h4>\n<p>Here is an example unit test I'm using with a Rails application I'm working on:</p>\n<pre class=\"sh_ruby\">\n   test \"should create a new payment\" do\n     assert_difference(\"Payment.count\") do\n       post :create, :payment => { :amount => '300' }\n     end\n     assert_redirected_to payment_path(assigns(:payment))\n   end\n</pre>\n<p>And for my own future reference, here are some other assertions I'm using:</p>\n<pre class=\"sh_ruby\">\nassert_valid(record)\nassert_response(\"200\")\nassert_template(\"mytemplate\")\n</pre>","fields":{"slug":"/2010/12/rails-tests-and-rcov-best-practices/"},"frontmatter":{"title":"Rails Tests and Rcov Best Practices","date":"December 31st, 2010","tags":"activerecord,rails,testing"}}},"pageContext":{"slug":"/2010/12/rails-tests-and-rcov-best-practices/"}}}