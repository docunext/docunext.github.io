{"componentChunkName":"component---src-templates-blog-post-js","path":"/2010/07/memcachedb-for-voting-polling-systems/","result":{"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>I recently setup a polling system for a client and when I was planning the design, I decided to use memcachedb thanks to the atomic increment functionality.</p>\n<p>I'm using Sinatra and Ruby for most web-based applications I develop these days, and I ran into an issue with <a href=\"http://www.docunext.com/\">marshal data too short</a> in the memcached client, but that was an easy fix.</p>\n<p>I chose memcachedb instead of memcache for the obvious reason that I need the data to be persistent.</p>","fields":{"slug":"/2010/07/memcachedb-for-voting-polling-systems/"},"frontmatter":{"title":"Memcachedb for Voting Polling Systems","date":"July 21st, 2010","tags":"sinatra"}}},"pageContext":{"slug":"/2010/07/memcachedb-for-voting-polling-systems/"}}}