{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2010/01/ruby-yaml-and-nesta/",
    "result": {"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>I'm hacking up my forked version of Nesta and right now I'm wrestling with YAML.</p>\n<p>In particular, I've never seen this syntax:</p>\n<pre class=\"sh_ruby\">\n    def self.google_analytics_code\n      get(environment)[\"google_analytics_code\"]\n    end\n</pre>\n<p>I get the idea - its setting an object variable based upon the runtime environment (development, production, test). <em>Its the parentheses and the square brackets that confuse me.</em> I'm used to functions and methods getting parameters inside of parentheses, not both parentheses and square brackets.</p>\n<p>The get method for the Configuration class is this:</p>\n<pre class=\"sh_ruby\">\n      def self.get(key, default = {})\n        configuration[key].nil? ? default : configuration[key]\n      end\n</pre>\n<p>Where does the environment fit in? I've searched for Ruby YAML configuration environment without luck, so now I'm searching for private ruby class methods.</p>\n<p><a href=\"http://stackoverflow.com/questions/12565/what-do-the-different-brackets-in-ruby-mean/13935#13935\" rel=\"nofollow\">Orion Edwards has made interesting comment on StackOverflow.com about []</a>:</p>\n<blockquote>There is also a convention that it is used as a class method in the same way you might use a static Create method in C# or Java.</blockquote>\n<p>Interesting, I recall now that [] is actually a method in itself. Its interesting, but not a solution for my problem.</p>\n<p>My goal is the get a hash object, not a string value for a key. If the key does not exist, I'd like to return a default hash object.</p>\n<p>This appears to be the best explanation of whats up:</p>\n<p><a href=\"http://www.ruby-forum.com/topic/135931\">http://www.ruby-forum.com/topic/135931</a></p>\n<p>Actually, that is from 2008 and seems a bit-outdated.</p>\n<p><strong>OK, I think I figured it out.</strong>\nIts times like these when I disagree with the purported advantages of YAML. This is what I ended up with:</p>\n<pre class=\"sh_ruby\">\n    def self.cache\n      #configuration[self.environment][\"cache\"].nil? ? ['cache_enabled' => false] : configuration[self.environment][\"cache\"]\n      #get((environment)[\"cache\"], { 'cache_enabled' => false })\n      conf.fetch(self.environment, conf).fetch('cache', { 'cache' => { 'cache_enabled' => false } })\n    end\n</pre>\n<p>And cleaned up:</p>\n<pre class=\"sh_ruby\">\n    def self.cache\n      conf.fetch(self.environment, conf).fetch('cache', { 'cache' => { 'cache_enabled' => false } })\n    end\n</pre>\n<p>Hmmmm. Seems a bit complicated, but not bad.</p>","fields":{"slug":"/2010/01/ruby-yaml-and-nesta/"},"frontmatter":{"title":"Ruby YAML and Nesta","date":"January 30th, 2010","tags":"ruby"}}},"pageContext":{"slug":"/2010/01/ruby-yaml-and-nesta/"}},
    "staticQueryHashes": ["3159585216","758480095"]}