{"componentChunkName":"component---src-templates-blog-post-js","path":"/2010/04/read-error-indexerror-string-not-matched/","result":{"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>This was an interesting error to debug! It comes from a Sinatra app traceback, but the full traceback wasn't much help, here's a little bit of it:</p>\n<pre class=\"sh_sh\">\nRead error: #&lt;IndexError: string not matched>\n/var/lib/gems/1.9.1/gems/sinatra-1.0.a/lib/sinatra/base.rb:600:in `[]='\n/var/lib/gems/1.9.1/gems/sinatra-1.0.a/lib/sinatra/base.rb:600:in `handle_exception!'\n/var/lib/gems/1.9.1/gems/sinatra-1.0.a/lib/sinatra/base.rb:586:in `rescue in dispatch!'\n/var/lib/gems/1.9.1/gems/sinatra-1.0.a/lib/sinatra/base.rb:589:in `dispatch!'\n</pre>\n<p>I think it turned out to be an encoding error, but I'm not sure why this IndexError was showing up. Turns out that this bit of code doesn't cause a problem when there are no errors, but causes the IndexError when there is a problem:</p>\n<pre class=\"sh_ruby\">\n@env = settings.environment\n</pre>\n<p>This is most likely Sinatra specific, if I change @env to @myenv, its OK. Since I don't actually need it, I've removed it altogether.</p>\n<p>And to fix  the encoding issue:</p>\n<pre class=\"sh_ruby\">\nrlinks.encode('UTF-8', undef: :replace, invalid: :replace)\n</pre>","fields":{"slug":"/2010/04/read-error-indexerror-string-not-matched/"},"frontmatter":{"title":"Read error lt IndexError string not matched","date":"April 26th, 2010","tags":"errors"}}},"pageContext":{"slug":"/2010/04/read-error-indexerror-string-not-matched/"}},"staticQueryHashes":["3159585216","3388129809"]}