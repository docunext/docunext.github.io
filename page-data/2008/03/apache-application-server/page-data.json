{"componentChunkName":"component---src-templates-blog-post-js","path":"/2008/03/apache-application-server/","result":{"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>With libapache2-modxslt (or similar) and mod_dbd, Apache gets a heck of a lot closer to an application server. In considering this, I was thinking about how to generate XML documents indirectly and dynamically. That's when I remembered this:</p>\n<p><a href=\"http://httpd.apache.org/docs/2.2/rewrite/rewrite_guide_advanced.html#on-the-fly-content\" rel=\"nofollow\">apache.org/.../rewrite/rewrite_guide#on-the-fly-content</a></p>\n<p>The idea here is to have Apache serve real files so that the cache control can also be dynamically controlled. For example, if a user updates a database record, the previously generated xml documents would need to be regenerated. If they were cached using Apache's mod_cache methods, it might not be as simple to purge a particular group of cached documents.</p>\n<p>By having the XML document server (maybe powered by python, php, or something) write and purge the documents to the filesystem upon generation, Apache can then do what it does so well - talk to clients.</p>\n<p>So guess what - it works! Here's the test setup I created: /var/www/public/main.xsl/var/www/public/entries.xml/var/www/public/entries.php</p>\n<pre class=\"sh_xml\">RewriteCond %{REQUEST_FILENAME} entries.xml\nRewriteCond /var/www/public%{REQUEST_FILENAME}   !-s\nRewriteRule .          /xslt/entries.php   [T=application/x-httpd-php,L]\n&lt;directory \"/var/www/public/xslt\"&gt;\n        Order deny,allow\n        Deny from all\n        Allow from 192.168\n        SetOutputFilter mod-xslt\n        AddType text/xml .xml\n        XSLTSetStylesheet text/xml /var/www/public/xslt/main.xsl\n&lt;/directory&gt;\n</pre>Follow-up: Webthing has some really cool modules for working with Apache as an application server, like mod_line_edit:\n<p><a href=\"http://apache.webthing.com/mod_line_edit/\">http://apache.webthing.com/mod<em>line</em>edit/</a></p>\n<p>It could be used to manage simple aberrations between different sites, for uses such as tracking codes, traffic analysis, header customizations, and css customizations.</p>","fields":{"slug":"/2008/03/apache-application-server/"},"frontmatter":{"title":"Apache Application Server","date":"March 15th, 2008","tags":"apache,xslt"}}},"pageContext":{"slug":"/2008/03/apache-application-server/"}}}