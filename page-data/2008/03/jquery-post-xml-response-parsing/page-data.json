{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2008/03/jquery-post-xml-response-parsing/",
    "result": {"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>Finally figured this out... something obvious as usual. I had to set the content type to text/xml for that the post request was receiving. Duh, after that, it was easy. I also read somewhere that jQuery dropped support for xpath, I'm fine with that, the DOM seems to fit better with client side work.</p>\n<p>I'm sticking with XML because I'm such a huge fan of it. JSON looks cool, but I'm happy with XML. Anyway, here's the code I got working:</p>\n<pre class=\"sh_javascript\">\n$.post(\"http://www.example.com/blah\",\n{\n  'barfy': 'blah'\n},\nfunction (data){\n  alert( ($(\"menu\",data).attr(\"id\")));\n});\n</pre>\n<p>Then the magnificient XML document which is sent to the jQuery ajax client:</p>\n<pre class=\"sh_xml\">\n&lt;menu id=\"hi\">    blah&lt;/menu>\n</pre>\n<p>This will result in \"hi\" getting alerted. For the \"blah\" value, you'd use ($(\"menu\",data).text()) as the DOM locator. The \"data\" text is in the jQuery ()'s because it is \"context\" of the reference, otherwise the query would be looking for menu in the existing page.</p>\n<p>Â¥</p>","fields":{"slug":"/2008/03/jquery-post-xml-response-parsing/"},"frontmatter":{"title":"jQuery Post XML Response Parsing","date":"March 6th, 2008","tags":"jquery,xml"}}},"pageContext":{"slug":"/2008/03/jquery-post-xml-response-parsing/"}},
    "staticQueryHashes": ["3159585216","758480095"]}