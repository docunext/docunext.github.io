{"componentChunkName":"component---src-templates-blog-post-js","path":"/2008/01/apache2-and-python-mod-wsgi/","result":{"data":{"markdownRemark":{"html":"<p>libapache2-mod-wsgi</p>\n<ul>\n<li><a href=\"http://packages.debian.org/unstable/python/libapache2-mod-wsgi\">http://packages.debian.org/unstable/python/libapache2-mod-wsgi</a></li>\n<li><a href=\"http://tools.cherrypy.org/wiki/ModRewrite\">http://tools.cherrypy.org/wiki/ModRewrite</a></li>\n<li><a href=\"http://code.google.com/p/modwsgi/wiki/IntegrationWithTrac\">http://code.google.com/p/modwsgi/wiki/IntegrationWithTrac</a></li>\n</ul>\n<p>installed mod_wsgi and web.py 0.2</p>\n<p>\"Premature end of script headers\" was getting caused by a collision with a cgi-script directive I had elsewhere in my config, as well as an incorrect mode setting, I think.</p>\n<p>Now I'm on to python-xml... trying to generate a simple xml document. Switched to lxml, got it.</p>\n<p>But now I'm wondering how to architect WSGI requests. Maybe I should use paste or cherrypy middleware? I'm just a little confused about the best way to instantiate and run web applications a daemons.</p>\n<div>\n<h4>What's up with __call__?</h4>\n<p>I finally figured out what's up with <strong>call</strong>. Imagine you have a class. You create an object instance of it. class car, my<em>car = car(), and when my</em>car is created, <strong>init</strong> is called. If you want to run my<em>car as a function, you can call my</em>car(), but you'll need a <strong>call</strong> function. I'm not really sure what the benefit of this is, but I imagine its good for something.</p>\n</div>\n<p><a href=\"http://www.docunext.com/2_and_mod_wsgi\">Apache 2 and mod_wsgi</a></p>","frontmatter":{"title":"Apache2 and python mod wsgi","date":"January 2nd, 2008"}}},"pageContext":{"slug":"/2008/01/apache2-and-python-mod-wsgi/"}}}