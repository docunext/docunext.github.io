{"componentChunkName":"component---src-templates-blog-post-js","path":"/2007/09/nanoservphp-vs-phpsocketdaemon/","result":{"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>There are two new libraries available for creating socket daemons in php. Both are created by experienced developers, and perform surprisingly well. To explore them more, I tested them using the Apache bench program \"ab\". NOTICE: these tests do not reliably evaluate the overall performance of one versus the other, they are simple rough estimates at best.</p>\n<h3>Nanoserv</h3>\n<pre>\nab -n 1000 -c 100 http://192.168.0.32:800/index.html\n\nThis is ApacheBench, Version 2.0.40-dev <$Revision: 1.146 $> apache-2.0\n\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\n\nCopyright 2006 The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking 192.168.0.32 (be patient)\n\nCompleted 100 requests\n\nCompleted 200 requests\n\nCompleted 300 requests\n\nCompleted 400 requests\n\nCompleted 500 requests\n\nCompleted 600 requests\n\nCompleted 700 requests\n\nCompleted 800 requests\n\nCompleted 900 requests\n\nFinished 1000 requests\n\nServer Software:        nanoserv/1.1.0-rc1\n\nServer Hostname:        192.168.0.32\n\nServer Port:            800\n\nDocument Path:          /index.html\n\nDocument Length:        39 bytes\n\nConcurrency Level:      100\n\nTime taken for tests:   1.494168 seconds\n\nComplete requests:      1000\n\nFailed requests:        0\n\nWrite errors:           0\n\nTotal transferred:      188122 bytes\n\nHTML transferred:       39234 bytes\n\nRequests per second:    669.27 [#/sec] (mean)\n\nTime per request:       149.417 [ms] (mean)\n\nTime per request:       1.494 [ms] (mean, across all concurrent requests)\n\nTransfer rate:          122.48 [Kbytes/sec] received\n\nConnection Times (ms)              min  mean[+/-sd] median   max\n\nConnect:        0    0   1.5      0      10\n\nProcessing:     1   15  82.0     11    1432\n\nWaiting:        1   13  82.0      8    1431\n\nTotal:          3   15  82.5     11    1438\n\nPercentage of the requests served within a certain time (ms)  50%     11  66%     11  75%     11  80%     11  90%     11  95%     12  98%     48  99%    226 100%   1438 (longest request)</pre>\n<h3>PHPSocketDaemon</h3>\n<pre>\nab -n 1000 -c 100 http://192.168.0.32:2001/index.html\n\nThis is ApacheBench, Version 2.0.40-dev <$Revision: 1.146 $> apache-2.0\n\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\n\nCopyright 2006 The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking 192.168.0.32 (be patient)\n\nCompleted 100 requests\n\nCompleted 200 requests\n\nCompleted 300 requests\n\nCompleted 400 requests\n\nCompleted 500 requests\n\nCompleted 600 requests\n\nCompleted 700 requests\n\nCompleted 800 requests\n\nCompleted 900 requests\n\nFinished 1000 requests\n\nServer Software:\n\nServer Hostname:        192.168.0.32\n\nServer Port:            2001\n\nDocument Path:          /index.html\n\nDocument Length:        63 bytes\n\nConcurrency Level:      100\n\nTime taken for tests:   2.34689 seconds\n\nComplete requests:      1000\n\nFailed requests:        0\n\nWrite errors:           0\n\nTotal transferred:      226000 bytes\n\nHTML transferred:       63000 bytes\n\nRequests per second:    491.48 [#/sec] (mean)\n\nTime per request:       203.469 [ms] (mean)\n\nTime per request:       2.035 [ms] (mean, across all concurrent requests)\n\nTransfer rate:          108.12 [Kbytes/sec] received\n\nConnection Times (ms)              min  mean[+/-sd] median   max\n\nConnect:        0    1   3.1      0      13\n\nProcessing:     9  195  82.0    130     298\n\nWaiting:        8  195  81.8    130     297\n\nTotal:         22  196  81.3    130     299\n\nPercentage of the requests served within a certain time (ms)  50%    130  66%    293  75%    296  80%    297  90%    297  95%    297  98%    298  99%    298 100%    299 (longest request)</pre>\n<p>Note that nanoserv had an incredibly fast low-end (50% of the requests were served within 5ms) while phpsocketdaemon had a consistently quick service time across all requests. My guess is that these variances are the result of the content that's getting served, and any server settings like keepalive that I wasn't paying attention to.</p>\n<p>The idea of a php-based socket server is really cool. I expect we'll see a php-based jabber server soon, as well as a socket daemon for sqlite databases.</p>","fields":{"slug":"/2007/09/nanoservphp-vs-phpsocketdaemon/"},"frontmatter":{"title":"Nanoserv.php vs phpsocketdaemon","date":"September 24th, 2007","tags":null}}},"pageContext":{"slug":"/2007/09/nanoservphp-vs-phpsocketdaemon/"}},"staticQueryHashes":["3159585216","3388129809"]}