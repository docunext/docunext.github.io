{"componentChunkName":"component---src-templates-blog-post-js","path":"/2007/09/question-does-a-rewriterule-that-follows-another-rewriterule-inherit-its-conditions/","result":{"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>Example:</p>\n<pre class=\"terminal\">\nRewriteMap redirects prg:/etc/apache2/lookitup.pl\nRewriteCond /var/www/%{REQUEST_FILENAME} !-f\nRewriteCond /var/www/%{REQUEST_FILENAME} !-d\nRewriteCond ${redirects:%{HTTP_HOST}|nomatch} !nomatch\nRewriteRule (.*) http://${redirects:%{HTTP_HOST}} [R=301,L]\nRewriteMap host_redirects prg:/etc/apache2/host_name_request_uri.pl\nRewriteCond /var/www/%{REQUEST_FILENAME} !-f\nRewriteCond /var/www/%{REQUEST_FILENAME} !-d\nRewriteCond ${host_redirects:%{HTTP_HOST}%{REQUEST_URI}|nomatch} !nomatch\nRewriteRule (.*) ${host_redirects:%{HTTP_HOST}%{REQUEST_URI}}/%{REQUEST_FILENAME} [R=301,L]\n</pre>\n<p>Is this the same as:</p>\n<pre class=\"terminal\">\nRewriteMap redirects prg:/etc/apache2/lookitup.pl\nRewriteMap host_redirects prg:/etc/apache2/host_name_request_uri.pl\nRewriteCond /var/www/%{REQUEST_FILENAME} !-f\nRewriteCond /var/www/%{REQUEST_FILENAME} !-d\nRewriteCond ${redirects:%{HTTP_HOST}|nomatch} !nomatch\nRewriteRule (.*) http://${redirects:%{HTTP_HOST}} [R=301,L]\nRewriteCond ${host_redirects:%{HTTP_HOST}%{REQUEST_URI}|nomatch} !nomatch\nRewriteRule (.*) ${host_redirects:%{HTTP_HOST}%{REQUEST_URI}}/%{REQUEST_FILENAME} [R=301,L]\n</pre>\n<p>I think this could be done using the [C] chain option, but to do that I'll have to alter my SQL queries a little, so that if the first rule doesn't match, it will negate the evaluation of the next rule. I wonder though, if the RewriteCond prevent the first Rule from getting evaluated, does that still count as a \"non-match\"? I hope so, that would save a lot of processing, and <strong>since these will be processed on every http request, we'll want to streamline as much as humanly possible!</strong></p>\n<p>Hmm, actually I don't think that's going to work so well. The first rule is a domain-based redirect, so if it doesn't match, that doesn't necessarily mean the second one shouldn't match either. Instead, I'm using an environment variable.</p>\n<pre class=\"terminal\">\nRewriteCond /var/www/%{REQUEST_FILENAME} !-f\nRewriteCond /var/www/%{REQUEST_FILENAME} !-d\nRewriteRule ^(.*)$ /$1 [C,E=REAL:NO]\nRewriteMap redirects prg:/etc/apache2/lookitup.pl\nRewriteCond ${redirects:%{HTTP_HOST}|nomatch} !nomatch\nRewriteRule (.*) http://${redirects:%{HTTP_HOST}} [R=301,L]\nRewriteMap host_redirects prg:/etc/apache2/host_name_request_uri.pl\nRewriteCond %{ENV:REAL} NO\nRewriteCond ${host_redirects:%{HTTP_HOST}%{REQUEST_URI}|nomatch} !nomatch\nRewriteRule (.*) ${host_redirects:%{HTTP_HOST}%{REQUEST_URI}} [R=301,L]\n</pre>","fields":{"slug":"/2007/09/question-does-a-rewriterule-that-follows-another-rewriterule-inherit-its-conditions/"},"frontmatter":{"title":"Question Does a RewriteRule that follows another RewriteRule inherit its conditions","date":"September 8th, 2007","tags":"apache,mod_rewrite"}}},"pageContext":{"slug":"/2007/09/question-does-a-rewriterule-that-follows-another-rewriterule-inherit-its-conditions/"}},"staticQueryHashes":["3159585216","758480095"]}