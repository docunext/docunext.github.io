{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2007/12/python-wsgi/",
    "result": {"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>I followed the\n<a href=\"http://www.python.org/dev/peps/pep-0333/\" rel=\"nofollow\">WSGI Hello World Tutorial\n</a>, and modified it to learn a little bit about how WSGI URIs are handled. I am familiar with how Apache and PHP deal with requests via the REQUEST_URI parameter, but WSGI uses PATH_INFO instead. That seems odd, but oh well, maybe I'm missing something.</p>\n<pre class=\"sh_python\">\ndef simple_app(environ, start_response):\n    \"\"\"Simplest possible application object\"\"\"\n    status = '200 OK'\n    response_headers = [('Content-type','text/plain')]\n    start_response(status, response_headers)\n    if environ[\"PATH_INFO\"]==\"/blah\" :\n        blah = 'blah\\n' + environ[\"PATH_INFO\"]\n    if environ[\"PATH_INFO\"]!=\"/blah\" :\n        blah = 'not blah\\n' + environ[\"PATH_INFO\"]\n    return [blah]\nfrom wsgiref.simple_server import make_server, demo_app\nhttpd = make_server('', 8000, simple_app)\nprint \"Serving HTTP on port 8000...\"# Respond to requests until process is killed\nhttpd.serve_forever()\n</pre>\n<p>This whole WSGI thing seems a lot more edible that the servlet engines that Java uses, but that might be simply due to my reliance on mod_php when I started doing this stuff way back when. For a long time I felt a web server always had to point towards a file, rather than be a running daemon itself. I like the idea of using python to fulfill that role, as it can handle complex objects so well.</p>\n<p><b>environ</b></p>\n<p>WSGI uses a dictionary object to handle the incoming HTTP stuff, like the request method and so on. That dictionary is called the <b>environ</b>.</p>\n<p>You can access the values in the dictionary by passing it a key reference, like this:</p>\n<pre class=\"sh_python\">\nprint environ[\"PATH_INFO\"]\n</pre>\n<p>I'm surprised there isn't a REQUEST_URI key, but you can create one by concatenating the PATH_INFO + \"?\" + QUERY_STRING.</p>\n<p>I'm also keeping ongoing notes about my learning curve with python here:</p>\n<p><a href=\"http://www.docunext.com/\">Python Notes</a></p>\n<p>Â¥</p>","fields":{"slug":"/2007/12/python-wsgi/"},"frontmatter":{"title":"Python WSGI","date":"December 22nd, 2007","tags":"python,wsgi"}}},"pageContext":{"slug":"/2007/12/python-wsgi/"}},
    "staticQueryHashes": ["3159585216","758480095"]}