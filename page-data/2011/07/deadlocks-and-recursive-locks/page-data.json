{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2011/07/deadlocks-and-recursive-locks/",
    "result": {"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>How do you like these Ruby errors?</p>\n<p><strong>1.9.2</strong></p>\n<pre class=\"terminal\">\n[2011-07-10 10:27:16] ERROR ThreadError: deadlock; recursive locking\n</pre>\n<p><strong>1.8.7</strong></p>\n<pre class=\"terminal\">\nERROR ThreadError: thread ************** tried to join itself\n</pre>\n<p>D'oh! This all started happening when I copied a bunch of resources from my <a href=\"http://www.fatherswork.com\">FathersWork</a> project to the <a href=\"http://www.regdel.com\">Regdel</a> project.</p>\n<p>Those resources include a bunch of Rack middleware, such as Rack::Config and Rack::Xsl, but the odd thing is that FathersWork.com is doing fine - but I haven't run it in the same environment.</p>\n<p>Here's one link I found:</p>\n<ul>\n<li><a href=\"http://blog.stochasticbytes.com/2011/01/rubys-threaderror-deadlock-recursive-locking-bug/\">http://blog.stochasticbytes.com/2011/01/rubys-threaderror-deadlock-recursive-locking-bug/</a></li>\n</ul>\n<p>But I think that's a more esoteric instance of the exception. Yep, I was able to narrow it down to a change in Rack 1.3.0 that has to do with closing the body object.</p>\n<p>I found <a href=\"https://github.com/rack/rack/issues/168\">this</a> bug report on the matter, and indeed, rtomayko nailed it!</p>\n<p>I made a quick couple of commits to rack-xsl and released 0.2.8 and it appears to be working perfectly. I'm not using Rack-xsl as much anymore, but its still a quality gem.</p>","fields":{"slug":"/2011/07/deadlocks-and-recursive-locks/"},"frontmatter":{"title":"Deadlocks and Recursive Locks","date":"July 10th, 2011","tags":"errors,ruby"}}},"pageContext":{"slug":"/2011/07/deadlocks-and-recursive-locks/"}},
    "staticQueryHashes": ["3159585216","758480095"]}