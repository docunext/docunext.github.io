{"componentChunkName":"component---src-templates-blog-post-js","path":"/2011/04/testing-models-with-rails-3-rspec-and-factory-girl/","result":{"data":{"markdownRemark":{"html":"<p>This post is an overview of how I am using Rails3, rspec, and factory_girl to test my ActiveRecord models. Its not a complete or thorough tutorial, though I think I've covered most of the components and included some thoughts on the matter. It should serve its purpose, if not, ask your questions via the comment form.</p>\n<p>I am working on another Rails 3 app. This one is a well defined app - its something I'd built in PHP before, and now I'm rebuilding in Rails 3. As such, I have a good idea of everything it should do.</p>\n<p>Yes, this is the perfect scenario for using specification tests with RSpec.</p>\n<p>Instead of fixtures, I'm using factories, more specifically, factory_girl.</p>\n<h4>What is Factory Girl?</h4>\n<p>Factory Girl (factory_girl) is a gem that can be used to create objects. The process is quite similar to using fixtures, though the format and syntax is different.</p>\n<p>Examples help, so here we go! A quick overview:</p>\n<blockquote><pre>\nThe app I am building is a DNS management tool. The base models are \"zone\" and \"record\". The zone model is the origin part of a zonefile, and includes a field named origin. For a single DNS server, the origin must be unique.\n</pre></blockquote>\n<h4>The Zone Model</h4>\n<p>Here is the zone model, including a couple, but not all, validations:</p>\n<pre class=\"sh_ruby\">\nclass Zone < ActiveRecord::Base\n  validates :origin,\n    :presence => true,\n    :uniqueness => true\n\n  validates :ttl,\n    :numericality => true\nend\n</pre>\n<h4>The Zone Factory</h4>\n<p>Here is the zone factory, located in spec/support/zone.rb:</p>\n<pre class=\"sh_ruby\">\nFactory.define :zone, :class => Zone do |f|\n  f.id 1\n  f.origin 'example.com.'\n  f.ttl 14400\n  f.mbox 'support@example.com'\n  f.ns 'ns.example.net'\nend\n</pre>\n<p>Note: this is really what I like about factories - they feel a lot more like Ruby than YAML.</p>\n<h4>The Model Test</h4>\n<p>Here is the zone model spec test, which was initially auto-generated by rails, and of course actually written by yours truly:</p>\n<pre class=\"sh_ruby\">\nrequire 'spec_helper'\ndescribe Zone do\n  before(:all) do\n    @zone = Factory.build(:zone)\n    @zone.save\n  end\n  it \"should be able to create a new zone\" do\n    puts @zone.errors.inspect\n    @zone.should be_valid\n  end\n  it \"should require origin to be unique\" do\n    zone = Zone.new(:id => 2, :origin => 'example.com.')\n    zone.save\n    zone.should_not be_valid\n    zone.errors[:origin].should == [\"has already been taken\"]\n  end\n  it \"should not update with invalid data\" do\n    @zone.update_attributes({:ttl => 'kasjdfkhd'})\n    @zone.should_not be_valid\n  end\n  after(:all) do\n    @zone.delete\n  end\nend\n</pre>\n<p>I run these tests with: <tt>rake spec</tt>.</p>\n<p>I hope this quick overview helps - I'm off to write more model tests. :-)</p>","frontmatter":{"title":"Testing Models with Rails 3 Rspec and Factory Girl","date":"April 2nd, 2011"}}},"pageContext":{"slug":"/2011/04/testing-models-with-rails-3-rspec-and-factory-girl/"}}}