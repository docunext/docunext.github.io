{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2011/09/rails-3-engines/",
    "result": {"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>I was curious about using rails and git, specifically with regard to engines.</p>\n<h4>Engines as Gems</h4>\n<p>As gems, they work really well - and I'm surprised the one I've been working on doesn't even end up in vendor/plugins (yet anyway - it may when I change from using \"../beast\" as the :path parameter).</p>\n<h4>Rought Sketch of a Rails 3 Engine Gem</h4>\n<p>Here's how it works:</p>\n<ul>\n<li>I added my engine gem named beast to the Gemfile in a rails 3.1 app</li>\n<li>Running bundle install did not copy the file into vendor/plugins as I'd expected</li>\n<li>Running \"bundle exec generate\" results with my new beast generators</li>\n<li>Running \"bundle exec generate\" beast creates a new migration as well as</li>\n</ul>\n<h4>Access to the Primary Application Helpers</h4>\n<p>When I first setup a view from an engine, connected by a routed mount, like this:</p>\n<pre class=\"sh_ruby\">\nmount Beast::Engine => '/beast'\n</pre>\n<p>My partials stopped working, then I found out about <tt>main_app</tt>.</p>\n<pre class=\"sh_ruby\">\nmain_app.accounts_path\n</pre>\n<h4>What is Beast?</h4>\n<p>Beast is not a new name at all. Its the mysterious rails forums engine that has been around for ages and has gone through a million transformations - beast, savage beast, altered beast, etc.</p>\n<p>I think its best to return to just beast. I thought, maybe roast beast. Who knows?</p>\n<h4>Even More Rails 3 Engine Considerations</h4>\n<ul>\n<li>It is surprisingly elegant - engines as gems work really well, and generators act as a</li>\n</ul>\n<p>bridge to \"pull in\" stuff from the engine into the main app, so the main app and the engine can be isolated or integrated with a real specificity.</p>\n<ul>\n<li>The only hurdle I faced was how much has changed with engines so recently</li>\n</ul>\n<p>sort of, the current state is that there is so much flexibility its a little too abstract.</p>\n<ul>\n<li>I think the Rails 3.1 engine code base is solid.</li>\n<li>What needs to happen is some documentation to help direct strategies - similar to choosing between STI and polymorphism.</li>\n<li>The generator I employed will modify main app views, but also create db migrations in db/migrate.</li>\n<li>The plugin doesn't even have to go in vendor/plugins since its a required gem, you actually don't even need to install it - in this case, say I have dev/main_app and dev/my_engine; in dev/main_app/Gemfile I put:</li>\n</ul>\n<p><tt>gem => 'my_engine', :path => '../my_engine'</tt></p>\n<ul>\n<li>I'm so glad its that easy! bundler even says something like \"no need to cache my_engine gem\"!</li>\n</ul>\n<h4>References</h4>\n<ul>\n<li><a href=\"http://www.builtfromsource.com/2010/12/13/mountable-engines-in-rails-3-1-beta-getting-started/\">http://www.builtfromsource.com/2010/12/13/mountable-engines-in-rails-3-1-beta-getting-started/</a></li>\n<li><a href=\"http://keithschacht.com/creating-a-rails-3-engine-plugin-gem/\">http://keithschacht.com/creating-a-rails-3-engine-plugin-gem/</a></li>\n<li><a href=\"https://github.com/josevalim/enginex\">https://github.com/josevalim/enginex</a></li>\n</ul>","fields":{"slug":"/2011/09/rails-3-engines/"},"frontmatter":{"title":"Rails 3 Engines","date":"September 11th, 2011","tags":"engines,\"rails 3\""}}},"pageContext":{"slug":"/2011/09/rails-3-engines/"}},
    "staticQueryHashes": ["3159585216","758480095"]}