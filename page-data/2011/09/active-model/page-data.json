{"componentChunkName":"component---src-templates-blog-post-js","path":"/2011/09/active-model/","result":{"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p>Active Model is a new component of Rails 3+ that abstracts out some generic functionality from ActiveRecord to that a single API can be included with different ORMs and data storage mechanisms.</p>\n<p>In my experience, this mostly helps with validations, and that is quite useful, but it also adds many handle methods like new_record? and destroyed?, to name a couple.</p>\n<p>What about persisted? No, that's an ActiveRecord method. There are other ORMs that support persisted, though, too, such as the Git interface included in Regulate.</p>\n<p>Speaking of which, the Git interface included in regulate is a very nice abstraction, but I'd prefer if it were more abstract. Its too tied into what regulate is all about, yet it sort of tries to be a little bit like ActiveRecord. I wonder if it could be replaced by gitmodel...?</p>\n<h4>Active Model with Associations?</h4>\n<p>I would really love it if Active Model could do associations, and had assumed for awhile that it would. But then I thought about my recent experiments with Arel and how it is able to create SQL joins based upon associations. I'd prefer that to having Ruby build all the associations manually.</p>\n<p>But still, its a really cool idea: to be able to create associations across different object models? Like setting static data as an array of hashes in the class definition.</p>\n<p>But wait! I imagine that it would be possible to have non-AR association method makers - something like \"model_has_many\", which would generate methods to define object-based relationships rather than SQL-based relationships. As a very simple example, it is possible to create AR<em>-like</em> methods manually:</p>\n<pre class=\"sh_ruby\">\nclass Person < ActiveRecord::Base\n\n  def accounts\n    Account.all.select{|a| a.person_id = self.id}\n  end\nend\n</pre>\n<p>Of course, the Person class would need to have an <tt>all</tt> method tha returned an array, in the above example.</p>\n<p>I have done some research on this topic because I felt certain that other developers must have been interested in this <em>very cool</em> idea. I found a project that seem to abstract out something like this:</p>\n<ul>\n<li><a href=\"https://github.com/maccman/supermodel\">SuperModel</a></li>\n</ul>\n<p>and I found a related, albeit difficult to read, PDF:</p>\n<ul>\n<li><a href=\"http://assets.en.oreilly.com/1/event/40/Rails_%20Next%20Top%20Model_%20Using%20ActiveModel%20and%20ActiveRelation%20Presentation.pdf\">Rails Next Top Model</a> - describes ActiveSupport, ARel, and ActiveModel</li>\n</ul>\n<p>Other related projects to Active Model and Active Relation:</p>\n<ul>\n<li><a href=\"https://github.com/jdpace/ShadyDB\">https://github.com/jdpace/ShadyDB</a></li>\n<li><a href=\"https://github.com/Gimi/mongorb\">https://github.com/Gimi/mongorb</a></li>\n<li><a href=\"https://github.com/matti/activeredis\">https://github.com/matti/activeredis</a></li>\n<li><a href=\"https://github.com/starpeak/activeimap\">https://github.com/starpeak/activeimap</a></li>\n<li><a href=\"https://github.com/pauldowman/gitmodel\">https://github.com/pauldowman/gitmodel</a></li>\n</ul>\n<p>Â¥</p>","fields":{"slug":"/2011/09/active-model/"},"frontmatter":{"title":"ActiveModel and ActiveRelation","date":"September 17th, 2011","tags":"git,orm"}}},"pageContext":{"slug":"/2011/09/active-model/"}}}