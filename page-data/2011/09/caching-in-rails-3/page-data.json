{"componentChunkName":"component---src-templates-blog-post-js","path":"/2011/09/caching-in-rails-3/","result":{"data":{"markdownRemark":{"html":"<p>I'm very impressed with the caching capabilities in Rails 3. Not only can it cache pages like any good Rack application can, it can also cache actions - which will include factors like authentication of sessions, and it can also cache... partials!</p>\n<p>Seriously, isn't that awesome?</p>\n<p>There are some other great aspects, too:</p>\n<ul>\n<li>When memcached is employed, time-to-live can be specified.</li>\n<li>Sweepers can be used to purge caches.</li>\n<li>Callbacks can be used to purge caches.</li>\n</ul>\n<p>In my experience, caching can be a pain because it can happen when it shouldn't. However, it has also been my experience that it is the most effective way to improve performance.</p>\n<h4>Example of Rails 3 Caching</h4>\n<pre class=\"sh_ruby\">\n  1 class AccountsController < InheritedResources::Base\n  2   defaults :resource_class => Account, :collection_name => 'accounts', :instance_name => 'account'\n  3\n  4   before_filter :clear_accounts_cache, :only => [:create, :update, :hide]\n  5   caches_action :index\n  6\n\n...\n\n 39   private\n 40     def clear_accounts_cache\n 41       expire_action :action => :index\n 42     end\n 43 end\n</pre>","frontmatter":{"title":"Caching in Rails 3","date":"September 1st, 2011"}}},"pageContext":{"slug":"/2011/09/caching-in-rails-3/"}}}