{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2011/10/gitmodel-and-regulate/",
    "result": {"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<h4>GitModel Rocks!</h4>\n<p>Tonight I've been working on GitModel, an ActiveModel powered ORM that uses Git as its storage mechanism.</p>\n<h4>Serializers</h4>\n<p>It originally used Yajl as its serialization layer, but I abstracted it out into a configurable module that can use json, yaml, or a custom interface I created to serialize to yaml front matter (similar to how Jekyll does it, and ikiwiki has a <a href=\"http://ikiwiki.info/plugins/contrib/ymlfront/\">plugin</a> for it, too).</p>\n<p>The code is surprisingly simple and working on it was a breeze. The test coverage was pretty good, too, but I expanded it a bit.</p>\n<h4>Regulate</h4>\n<p>I plan to next use GitModel with regulate, which implements its own Git-powered ORM in a manner quite similar to GitModel.</p>\n<h4>Indexing</h4>\n<p>After that, if I have time, I'd like to look at improving the way the indexing is done in GitModel, exploring and evaluating some different options - including marshalling the index, as it doesn't need to be human editable.</p>\n<p>I'm also considering making a simple index with something like CDB, Tokyo Cabinet, or QDBM - maybe Memcache, too - its already included in GitModel for some components.</p>\n<h4>Relations</h4>\n<p>Beyond that I'd really like to have the syntax mimic that of Mongoid, and potentially even add relations like embeds_many and embedded_in. That would be a much more significant undertaking, obviously, and would require a bunch more indexing capabilities.</p>\n<h4>Questions</h4>\n<h4>Folder Structure</h4>\n<p>I still can't decide whether I want the storage files to be enclosed in a folder with a generic name like 'attributes.json', or have them stored in a file with the name of the object's id. I used to want to have the plain file, but then I read the page on the ikiwiki site: <a href=\"http://ikiwiki.info/tips/switching_to_usedirs/\">switching to usedirs</a>. That's made me reconsider, however I think that argument refers to the rendering of the site, not necessarily the repository.</p>\n<h4>Integration Beyond (De-)Regulate</h4>\n<p>It would be really interesting if GitModel could integrate with something like jekyll or octopress. I'd also like to see an implementation of git-wiki using it, made with Rails of course. I've done a bunch of work on a git wiki fork, mainly trying to make it compatible with ikiwiki, which I was able to do.</p>\n<p>I emailed the original author of GitModel earlier today:</p>\n<blockquote><pre>\nHi,\n<p>I have been working on a fork of regulate:</p>\n<p><a href=\"https://github.com/docunext/regulate\">https://github.com/docunext/regulate</a></p>\n<p>which is kind of like your balisong app. While the original regulate by quickleft also uses the attributes.json method, I switched to using front matter (sort of like yaml) after trying out jekyll.</p>\n<p>Anyway, regulate implements a git interface that could probably be replaced by gitmodel, but it would need some flexibility as to the serialization process - i.e. making the database structure configurable so that the user could choose between json or yaml, and the database structure - either my-awesome-folder-name/attributes.serialized or my-awesome-filename.serialized.</p>\n<p>If the latter sounds wacky, not to fret - Joey Hess of Debian awesomeness implemented the same in Ikiwiki.</p>\n<p>Is this something you'd consider in the mainline? I've already done the conversion for regulate (and made it somewhat configurable). Abstracting the git interface out is something on the to-do list.</p>\n<p>Albert\n</pre></blockquote></p>\n<p>Hopefully we can collaborate, though I'd like to remove blob support, and I'm not sure the original author would be open to that.</p>\n<h4>The Source!</h4>\n<ul>\n<li><a href=\"https://github.com/docunext/regulate\">https://github.com/docunext/regulate</a></li>\n<li><a href=\"https://github.com/docunext/gitmodel\">https://github.com/docunext/gitmodel</a></li>\n</ul>\n<p>NOTE: Use of gitmodel from regulate is done through the \"gitmodel\" branch of regulate.\nBoth are on GitHub, but note that regulate has a branch for gitmodel; master uses an internal interface.</p>","fields":{"slug":"/2011/10/gitmodel-and-regulate/"},"frontmatter":{"title":"Howto Run the Regulate Rails3 CMS engine on GitModel a Rails3 ActiveModel ORM using Git","date":"October 27th, 2011","tags":"git,json"}}},"pageContext":{"slug":"/2011/10/gitmodel-and-regulate/"}},
    "staticQueryHashes": ["2191495970","4224293195"]}