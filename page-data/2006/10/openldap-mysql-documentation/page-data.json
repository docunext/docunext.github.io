{"componentChunkName":"component---src-templates-blog-post-js","path":"/2006/10/openldap-mysql-documentation/","result":{"data":{"site":{"siteMetadata":{"domain":"https://www.docunext.com"}},"markdownRemark":{"html":"<p><strong>New effort as of Oct 2006</strong></p>\n<p>Made some very good progress:</p>\n<ol>\n<li>Installed slapd\n</li>\n<li>Imported the metadata database tables\n</li>\n<li>Fiddled with slapd.conf - you will have a database section which connects to the odbc driver using the database username and password. For example, if you are using mysql, the driver would likely be myodbc or myodbc3.\n</li>\n<li>Tested with:\n</li>\n</ol>\n<pre>ldapsearch -x\n</pre>\n<p><strong>Metadata Database Tables</strong></p>\n<p>This is the most challenging part of the process for me, and I think a better understanding of ldap structures would help out immensely. You have to enter a bunch of terms like \"inetorgperson\" \"organizationalUnit\" and such, and there are rigid objects and attributes in ldap, like \"o\", \"givenName\", \"name\", etc. I like what I see, I just wish I was more familiar with it.</p>\n<p><strong>UPDATE!!</strong></p>\n<p>Flatmtn does a great job of explaining how to setup back-sql, however the document is outdated, and doesn't acknowledge that Mysql now supports views. So try this:</p>\n<pre>CREATE VIEW ldap_entries_test (id,dn,oc_map_id,parent,keyval) AS SELECT uid,CONCAT('uid=',uid,',ou=contacts,dc=docunext,dc=com'),2,1,uid FROM auth_user;</pre>\n<p>p><strong>Test Steps</strong></p><ol>    <li>Added \"odbc\" to /etc/make.conf</li>    <li>Code:</li></ol><p></p><pre>\nhost user # emerge -pv pam_ldap</p>\n<p>These are the packages that I would merge, in order:</p>\n<p>Calculating dependencies ...done![ebuild     U ] sys-libs/db-4.2.52<em>p2-r1 [4.2.52</em>p2] -bootstrap -doc -java -nocxx -tcltk 3,980 kB [ebuild  N    ] dev-db/unixODBC-2.2.6  -gnome -qt 2,128 kB [ebuild  N    ] net-nds/openldap-2.2.28-r3  +berkdb +crypt -debug -gdbm -ipv6 -kerberos -minimal +odbc +perl -readline +samba -sasl (-selinux) -slp +ssl +tcpd 4,565 kB [ebuild  N    ] sys-auth/pam_ldap-180  +ssl 124 kB</p>\n<p>Total size of downloads: 10,798 kB</pre><hr>---------</p>\n<p>OLD NOTES:</p>\n<p>SETTING UP OPENLDAP WITH MYSQL BACKEND</p>\n<p>author: TBONIUS</p>\n<p>OpenLDAP is an X.500 Lightweight Directory Access Server used for centralized authentication and directory lookups. This article covers configuring this service to utilize SQL services in order to store its data object. Having these objects stored in a SQL database allow for third party applications access to manage these objects.</p>\n<p>PORTS THAT ARE NEEDED:</p>\n<p>MySQL 4.x server : /usr/ports/databases/mysql41-server</p>\n<p>MySQL 4.x client : /usr/ports/databases/mysql41-client</p>\n<p>LibIODBC 3.x : /usr/ports/databases/libiodbc</p>\n<p>MyODBC 3.x : /usr/ports/databases/myodbc</p>\n<p>OpenLDAP 2.x : /usr/ports/databases/openldap21-server WITH_ODBC=\"YES\"</p>\n<p>CONFIGURING THE MYSQL SERVER</p>\n<p>OpenLDAP has the option to use many different kinds of databases, in this case we will use MySQL. The first step in setting this up is to create a MySQL database for which OpenLDAP will use.</p>\n<p>root@host # mysqladmin create ldap</p>\n<p>Next we will create a MySQL account that OpenLDAP will use for our newly created ldap database</p>\n<p>root@host # mysql</p>\n<p>Welcome to the MySQL monitor.  Commands end with ; or \\g.</p>\n<p>Your MySQL connection id is 10 to server version: 4.0.18</p>\n<p>Type 'help;' or '\\h' for help. Type '\\c' to clear the buffer.</p>\n<p>mysql>grant all privileges on ldap.* to 'ldap'@'localhost'    ->identified by 'password' with grant option;</p>\n<p>Query OK, 0 rows affected (0.13 sec)</p>\n<p>We of course want to substitute 'password' with the actual password we wish to use for this particular user account</p>\n<p>CONFIGURING LIBIODBC TO USE THE MYODBC DRIVER</p>\n<p>Quite simply we need to edit two file here to get LibODBC to use the MyODBC driver in accessing the MySQL server.</p>\n<p>Take a look at the /usr/local/etc/libiodbc/odbcinst.ini file and make the following changes[ODBC Drivers]</p>\n<p>MySQL = Installed[MySQL]</p>\n<p>Description=ODBC for MySQL</p>\n<p>Driver=/usr/local/lib/libmyodbc3.so</p>\n<p>Take a look at the /usr/local/etc/libiodbc/odbc.ini and make the following changes[ODBC Data Sources]</p>\n<p>ldap = MySQL LDAP DSN[ldap]</p>\n<p>Driver          = /usr/local/lib/libmyodbc3.so</p>\n<p>Description     = OpenLDAP Database</p>\n<p>Host            = localhost</p>\n<p>ServerType      = MySQL</p>\n<p>Port            = 3306</p>\n<p>FetchBufferSize = 99</p>\n<p>User            = ldap</p>\n<p>Password        = password</p>\n<p>Database        = ldap</p>\n<p>ReadOnly        = no</p>\n<p>Socket          = /tmp/mysql.sock[ODBC]</p>\n<p>InstallDir=/usr/local/lib</p>\n<p>Again, substitute password for the actual password we created for the ldap user of the MySQL database.</p>\n<p>We can test our current configuration before installing and configuring OpenLDAP. LibIODBC provides a test utility to check DSN configurations.(Note from darxpryte: Upon following this tutorial I've found that iodbctest was not built automatically. This may be fixed later but if you find this to be the case you'll need to do the following:</p>\n<p>cd /usr/ports/databases/libiodbc/</p>\n<p>make extract</p>\n<p>cd work/libiodbc-3.52.2/samples</p>\n<p>make install This will install iodbctest into /usr/local/bin/)</p>\n<p>Once you install iodbctest, you can do the following to test your connection:</p>\n<p>root@host # iodbctest</p>\n<p>iODBC Demonstration program</p>\n<p>This program shows an interactive SQL processor</p>\n<p>Driver Manager: 03.51.0001.0908</p>\n<p>Enter ODBC connect string (? shows list): ?</p>\n<p>DSN                            | Description---------------------------------------------------------------</p>\n<p>ldap                           | MySQL LDAP DSN</p>\n<p>Enter ODBC connect string (? shows list):DSN=ldap</p>\n<p>Driver: 03.51.06</p>\n<p>SQL>show tables;</p>\n<p>Tables<em>in</em>ldap---------------------</p>\n<p>authors_docs</p>\n<p>documents</p>\n<p>institutes</p>\n<p>ldap<em>attr</em>mappings</p>\n<p>ldap_entries</p>\n<p>ldap<em>entry</em>objclasses</p>\n<p>ldap<em>oc</em>mappings</p>\n<p>ldap_referrals</p>\n<p>persons</p>\n<p>phones</p>\n<p>result set 1 returned 10 rows.</p>\n<p>This shows us that the DSN is configured correctly for LibIODBC to use the MyODBC driver in order to connect to our ldap database we set up on our MySQL Server</p>\n<p>If you have problems displaying the DSN names defined in the odbc.ini file via the test program, try exporting the following shell environmental variable:</p>\n<p>For csh or tcsh:</p>\n<p>setenv ODBCINI /usr/local/etc/libiodbc/odbc.ini</p>\n<p>For sh or bash:</p>\n<p>export ODBCINI=/usr/local/etc/libiodbc/odbc.ini</p>\n<p>CONFIGURING OPENLDAP TO USE MYSQL</p>\n<p>During the build of OpenLDAP, we need to pass the WITH_ODBC=\"YES\" option so that the server build the appropriate SQL configurations</p>\n<p>After the make install process, we will copy over the slapd.conf file that is configured to use a SQL backend. This file is buried under the OpenLDAP ports directory in the following path:</p>\n<p>work/openldap-2.1.30/servers/slapd/back-sql/rdbms_depend/mysql</p>\n<p>Change to this directory, from the ports directory of OpenLDAP, and copy the configuration file over> cp slapd.conf /usr/local/etc/openldap</p>\n<p>Then we can import the back SQL file from this directory into our running MySQL server database</p>\n<p>root@host # mysql &#x3C; backsql_create.sql ldap</p>\n<p>root@host # mysql &#x3C; testdb_create.sql ldap</p>\n<p>Optionally we can import the testdb<em>data and testdb</em>metadata files into the database so that we can have example data with which to work</p>\n<p>Next we need to edit the /usr/local/etc/openldap/slapd.conf file and make the protper adjustments. We need to setup the slapd service to use a SQL backend under the \"SQL database definitions\" section</p>\n<p>database        sql</p>\n<p>suffix          \"o=sql,c=RU\"</p>\n<p>rootdn          \"cn=root,o=sql,c=RU\"</p>\n<p>rootpw          secret</p>\n<p>dbname          ldap</p>\n<p>dbuser          ldap</p>\n<p>dbpasswd        password</p>\n<p>subtree<em>cond    \"ldap</em>entries.dn LIKE CONCAT('%',?)\"</p>\n<p>insentry<em>query  \"INSERT INTO ldap</em>entries (dn,oc<em>map</em>id,parent,keyval) VALUES (?,?,?,?)\"</p>\n<p>Go ahead and comment out or delete any other example configurations for alternate SQL connectors such as Postgres and/or MsSQL settings. (Unless of course you are using a Postgres or MsSQL server as your backend</p>\n<p>POST INSTALLATION CONFIGURATION</p>\n<p>Next, we need to edit the /etc/rc.conf and configure the OpenLDAP server to star on boot by making the following changes</p>\n<p>slapd_enable=\"YES\"</p>\n<p>slapd_flags='-h \"ldapi://%2fvar%2frun%2fopenldap%2fldapi/ ldap://0.0.0.0/\"'</p>\n<p>slapd_sockets=\"/var/run/openldap/ldapi\"</p>\n<p>And finally we need to edit the OpenLDAP startup script and setup the ODBC path for the server to use. Edit /etc/rc.d/slapd file and add the following line:</p>\n<p>export ODBCINI=/usr/local/etc/libiodbc/odbc.ini</p>\n<p>Just as we performed the iodbctest, this variable is essential for OpenLDAP to know where the configuration file to use for ODBC connectivity</p>\n<p>Now we are ready to try and bring up our OpenLDAP server. Let us start by running slapd manually in debug mode to see the output of startup:</p>\n<p>root@host # /usr/local/libexec/slapd -d 1</p>\n<p>We should see the following at the end of the debug output:&#x3C;==load<em>schema</em>map()&#x3C;==backsql<em>get</em>db<em>conn()==>backsql</em>free<em>db</em>conn()</p>\n<p>backsql<em>free</em>db<em>conn(): closing db connection==>backsql</em>close<em>db</em>conn()&#x3C;==backsql<em>close</em>db<em>conn()&#x3C;==backsql</em>free<em>db</em>conn()&#x3C;==backsql<em>db</em>open(): test succeeded, schema map loaded</p>\n<p>slapd starting</p>\n<p>If this is the given output then it looks like our configuration is correct and we are ready to start up OpenLDAP normally for operation./etc/rc.d/slapd start</p>\n<p>This will startup the OpenLDAP server and we can verify it is running with the following command:</p>\n<p>root@host # sockstat |grep slapd</p>\n<p>ldap     slapd      71838 5  dgram  -&#x3C; /var/run/log</p>\n<p>ldap     slapd      71838 8  stream /var/run/openldap/ldapi</p>\n<p>ldap     slapd      71838 9  tcp4   <em>:389                 *:</em></p>\n<p>From here, use any OpenLDAP Administration tool of your choice to add, edit and remove data from your LDAP server</p>","fields":{"slug":"/2006/10/openldap-mysql-documentation/"},"frontmatter":{"title":"openldap mysql documentation","date":"October 31st, 2006","tags":"ldap,mysql,openldap"}}},"pageContext":{"slug":"/2006/10/openldap-mysql-documentation/"}},"staticQueryHashes":["3159585216","3388129809"]}