{"data":{"markdownRemark":{"html":"<p>Like Bart Simpson must write on the blackboard, I have to keep repeating myself:</p>\n<ul>\n<li>I will write unit tests</li>\n<li>I will write unit tests</li>\n<li>I will write until tests...</li>\n</ul>\n<p>Why? To save time! That's my greatest limited resource and I need to use it more wisely. I've always had a hunch that writing tests was helpful, but now I'm certain that I can save lots of time and aggravation by writing more and better tests for the software I write.</p>\n<p>These days I'm writing a lot of Ruby software, and thankfully there are some incredible testing kits out there (actually I should do a review of the ones I've used over at <a href=\"http://www.docunext.com/blog/\">Ruby Code Experiments</a>), and most of my use of them revolves around the awesome Rake tool.</p>\n<p>Beyond saving time, writing tests adds another interesting perspective to the software development paradigm: completeness.</p>\n<p>I doubt I'm the only one whose ever been involved with a scope-less software project which eventually starts to suffer feature creep. Its no fun - things get out of hand and its hard to stay focused. With tests, specifying what a software package should and shouldn't do is fairly straightforward.</p>\n<p>I'm sure I haven't covered all the awesome benefits of writing and using software tests, so please share your thoughts on the matter too!</p>","frontmatter":{"title":"The Importance of Writing Software Tests"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2010/2010-05-03-the-importance-of-writing-software-tests/"}}