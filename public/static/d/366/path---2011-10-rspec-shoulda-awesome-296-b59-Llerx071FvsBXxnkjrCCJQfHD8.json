{"data":{"markdownRemark":{"html":"<p>I've been digging deeper into Rspec, and along the way I've found some truly amazing features enabled by combining Rspec and shoulda from thoughtbot.</p>\n<h4>A Brief History of Rspec and Shuolda</h4>\n<p>First a bit of background - Ruby has been dominated by Ruby on Rails for quite some time, and it ships with Test::Unit. Test::Unit does the job, obviously - to this day tons of developers use Test::Unit on a daily basis. But the fact remains - there is room for improvement. Case in point, Rails 3 actually switched to MiniTest, a Test::Unit clone. Not that Rspec was or is perfect - its gone through a major shift from version 1 to version 2. I thought version 1 was cool, Rspec version 2 is wicked awesome.</p>\n<p>How about Shoulda? Shoulda is a gem created by the folks at ThoughtBot - where giant robots smash into other, not-so-giant-robots. They've contributed some seriously awesome gems to the Ruby on Rails community, including Paperclip, high_voltage, and Factory Girl.</p>\n<p>Shoulda is certainly in their greatest hits, in my humble opinion. Just think - Shoulda is good to go with Test::Unit, MiniTest, <em>or</em> Rspec, though it originated in the world of Test::Unit. When I first used it, I took it for granted, and assumed it was just part of the Rails testing suite. After reading up on how well it interacts with Rspec, I'm very grateful for Shoulda.</p>\n<h4>RSpec and Shoulda = Awesome</h4>\n<p>Note, a lot of the awesomeness I've discovered is thanks to this awesome <a href=\"http://pure-rspec-scotruby.heroku.com/\">presentation</a> by Lark.</p>\n<p>Take a look at these Rspec examples with Shouda:</p>\n<pre class=\"sh_ruby\">\ndescribe BlogPost do\n  it { should be_invalid }\nend\n</pre>\n<p>That Rspec example can expand into this beauty:</p>\n<pre class=\"sh_ruby\">\ndescribe BlogPost do\n  subject { BlogPost.new :title => 'foo', :body => 'bar' }\n  it \"sets published timestamp\" do\n    subject.publish!\n    subject.published_on.should == Date.today\n  end\nend\n</pre>\n<p>and furthermore into this:</p>\n<pre class=\"sh_ruby\">\ndescribe BlogPost do\n  subject do\n    BlogPost.new(:title => 'foo', :body => 'bar').tap do |p|\n      p.publish!\n    end\n  end\n  it { should be_valid }\n  its(:errors) { should be_empty }\n  its(:title) { should == 'foo' }\n  its(:body) { should == 'bar' }\n  its(:published_on) { should == Date.today }\nend\n</pre>\n<p>Wicked awesome, huh?</p>\n<p>As Lark puts it, \"Hold it right there.\"</p>\n<pre class=\"sh_ruby\">\nexpect do\n  foo.bar\nend.to change {baz.quux}.from('corge').to('grault')\n</pre>\n<p>Nuff said. Actually, no, I've got more to discuss.</p>\n<h4>Describe, Context, and It</h4>\n<p>Using Rspec and Shoulda can be challenging because its so flexible, but sticking to the core has helped me. I also try to keep my tests consistent and to the bare minimum. Like this for example:</p>\n<pre class=\"sh_ruby\">\ndescribe Make do\n  let (:make) { Make.make }\n  it { should respond_to :name }\nend\n</pre>\n<p>It is so to the point! But what about a <em>real</em> test? Not just an obvious confirmation that the associations are still setup right. For me, that's when I bring in <strong>context</strong>. Note that context and describe are interchangeable, but in my humble opinion, they are different. I use describe to frame a test, and context to position it. I use describe to describe and object, and context to put that object in a situation.</p>\n<p>While it can be passed a string to explain what it should be doing, including shoulda will combine the two together. That is truly awesome.</p>\n<h4>What About Rails 3??</h4>\n<p>Actually, Rspec 2 and Shoulda are awesome on their own, it just turns out that I'm using them extensively on a bunch of rails 3.1 apps and engines, so that's what got me researching them. I am convinced that Rails 3.1 is totally awesome, too, and the fact that these projects all work together is a thing of beauty, in my humble opinion.</p>\n<p>Â¥</p>","frontmatter":{"title":"Rspec 2 Shoulda Rails 3.1 Awesome","date":"October 26th, 2011"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2011/10/rspec-shoulda-awesome/"}}