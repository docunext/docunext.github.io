{"data":{"markdownRemark":{"html":"<p>The upgrade of Rails 2 to Rails 3 is a bunch of really helpful simplifications, including this one by changing <tt>named_scope</tt> to <tt>scope</tt>.  Funny, it almost reminds me of how plain and simple the module names are for Drupal - Views, Backup &#x26; Restore, etc.</p>\n<p>While simplifying it, Rails 3 adds to the scope concept by incorporating \"chainability\". I would normally refer to this concept as <em>method chaining</em>, but in this case of helpers, I gotta stick with <strong>chainability</strong>.</p>\n<p>In short, scopes can now be chained together!</p>\n<p>Here's a quick example:</p>\n<pre class=\"sh_ruby\">\nclass Memory < ActiveRecord::Base\n  validates_presence_of :date\n  scope :publik, :conditions => 'privacy = 10'\nend\n</pre>\n<p>Class instantiation then looks something like this:</p>\n<pre class=\"sh_ruby\">\nres = Memory.publik.where(:user_id => @current_user.id).limit(5)\n</pre>","frontmatter":{"title":"Rails 3 ActiveRecord scope and chainability Helpers"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2011/2011-03-07-rails-3-activerecord-scope-and-chainability-helpers/"}}