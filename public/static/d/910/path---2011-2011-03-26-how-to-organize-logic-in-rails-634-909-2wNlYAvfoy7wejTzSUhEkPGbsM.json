{"data":{"markdownRemark":{"html":"<p>When engineering software, there is a straightforward and somewhat obvious strategy for separating functionality from presentation: put as little code as possible in the templates.</p>\n<p>As software frameworks evolve, they start to get more compartmentalized. For example, Ruby on Rails uses the Model-View-Controller paradigm for organizing its resources, but MVC is not the whole story - it includes helpers, too.</p>\n<p>Recently, I've wanted to better organize my Rails projects, and here are some thoughts I'd like to share.</p>\n<ul>\n<li>Helpers return strings, and they have constants</li>\n<li>Model methods are all about objects</li>\n<li>Controllers generally connect result sets with templates, but also contain filters</li>\n</ul>\n<p>A few other notes:</p>\n<ul>\n<li>Helpers can be passed objects, of course, and those objects can call their own methods</li>\n<li>Templates call helper functions</li>\n</ul>\n<h4>Here's An Example of a Model Method</h4>","frontmatter":{"title":"How to Organize Logic in Rails"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2011/2011-03-26-how-to-organize-logic-in-rails/"}}