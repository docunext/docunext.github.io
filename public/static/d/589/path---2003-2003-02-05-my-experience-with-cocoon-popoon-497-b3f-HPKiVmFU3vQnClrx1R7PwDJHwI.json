{"data":{"markdownRemark":{"html":"<p>Sitemap</p>\n<p>Still not sure what this does. Thinking that it controls the way cpopoon behaves for a certain filesystem tree.</p>\n<p>Judging by the name, it may define that tree, and there was a reference to it being inspired by the .htaccess file</p>\n<p>of Apache.</p>\n<p>This is the include for using popoon in any way. In the bitflux demo webpage, the first line regarding popoon</p>\n<p>is:</p>\n<pre class=\"php\">$sitemap = new popoon (\"../sitemap/sitemap.xml\",$_SERVER?\"REQUEST_URI\",\narray(\"sm2php_xsl\"=>BX_BITLIB_DIR.\"php/popoon/sitemap/sitemap2php.xsl\", \"cacheDir\"=>BX_PROJECT_DIR.\"/tmp/popoon/\")\nthen goes on to instantiate the object with: $sitemap = new popoon (\"../sitemap/sitemap.xml\");</pre>\n<p>I am under the impression that you can nest these in an hierarchical manner. The bitflux page has one sitemap</p>\n<p>that references a simple.xml file that simple provides the structure. Everything else is inside the db.</p>\n<p>Seems like the simple.xml file structure definition may be hardcoded.</p>\n<p>More General Concepts</p>\n<p>Actions − Database &#x26; Sessions</p>\n<p>Generators − starting point, there are lots of generators, although Chregu says he's not sure if popoon\nneeds it?</p>\n<p>Matchers − deal with uri's</p>\n<p>Readers − readers are useful for delivering binary data</p>\n<p>Schemes</p>\n<p>Selectors − similar to matchers...</p>\n<p>Serializers</p>\n<p>Transformers − central point in a sitemap pipeline. ???</p>\n<p>SAX − Cocoon uses SAX, Popoon may use its own API. Popoon doesn't use SAX. Preferred method\nis via domxml objects.</p>","frontmatter":{"title":"My Experience with Cocoon Popoon"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2003/2003-02-05-my-experience-with-cocoon-popoon/"}}