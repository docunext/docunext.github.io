{"data":{"markdownRemark":{"html":"<p>Varnish the reverse proxy can do some pretty cool stuff. I just realized that it compiles its VCL rules into C so that they are process quite efficiently. Here's a few examples:</p>\n<h4>Route to a different backend based upon location (i.e. url):</h4>\n<pre>\nbackend server1 {    set backend.host = \"192.168.222.222\";    set backend.port = \"80\";}\n\nsub vcl_recv {    if (req.url ~ \"^/location-url\") {        set req.backend = server1;        set req.http.host = \"www.example.com\";    }}</pre>\n<p>Explanation: when a client requests the url \"/location-url\" from varnish, it \"routes\" the request server1, which is located at the ip address 192.168.222.222, and uses the http host name www.example.com.</p>\n<h4>Backend choice with a traditional rewrite:</h4>\n<pre>\nbackend server1 {    set backend.host = \"192.168.222.222\";    set backend.port = \"80\";}\n\nsub vcl_recv {    if (req.url ~ \"^/location-url\") {        set req.backend = server1;        set req.url = regsub(req.url, \"^/location-url\", \"/url-location\");        set req.http.host = \"www.example.com\";    }}</pre>\n<p>Explanation: this is the same example, but the request prefix is changed from location-url to url-location. Pretty nifty, huh?</p>\n<p>Â¥</p>","frontmatter":{"title":"Varnish URL Rewriting","date":"2008-06-29T00:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2008/2008-06-29-varnish-url-rewriting/"}}