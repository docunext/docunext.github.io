{"data":{"markdownRemark":{"html":"<p>I recently setup a polling system for a client and when I was planning the design, I decided to use memcachedb thanks to the atomic increment functionality.</p>\n<p>I'm using Sinatra and Ruby for most web-based applications I develop these days, and I ran into an issue with <a href=\"http://www.docunext.com/wiki/Ruby_Memcache_Client\">marshal data too short</a> in the memcached client, but that was an easy fix.</p>\n<p>I chose memcachedb instead of memcache for the obvious reason that I need the data to be persistent.</p>","frontmatter":{"title":"Memcachedb for Voting Polling Systems"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2010/2010-07-21-memcachedb-for-voting-polling-systems/"}}