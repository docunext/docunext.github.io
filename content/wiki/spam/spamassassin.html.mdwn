Spamassassin is a [[/spam]] filtering program written in [[/perl]] which uses
a bunch of rules to rank the "spamminess" of a message. MTA's like [[Postfix]]
can then use that ranking value to either block or separate the email into
a spam folder.

### Spamassassin Configuration

There are a couple of different ways to get Spamassassin to do something
noticeable. I've used the following configurations:

* As a maildrop filter
* As a relaying filter

I prefer the second method as I found it much more manageable, though it does
require another component - a [[seive]] rule to deliver emails marked as spam by
spamassassin into a different folder, instead of the mailbox. And besides the
sieve rule, the LDA needs to be able to operate on it. For that, I would use
[[/email/Postfix]] and [[/Dovecot]], with Postfix setup as the MTA and
Dovecot as the LDA.

There are several parts to a successfully functioning spamassassin service,
including the spamassassin daemon and the spamc client.

### spamc
I just happened to be messing around with spamc and its kind of neat. This is what I tried:

<pre><code>
 echo "blah" | spamc -d 127.0.0.1
Received: from localhost by email.example.com
	with SpamAssassin (version 3.2.4);
	Sun, 30 Mar 2008 14:57:20 -0400
X-Spam-Flag: YES
X-Spam-Checker-Version: SpamAssassin 3.2.4 (2008-01-01) on email.example.com
X-Spam-Level: ********
X-Spam-Status: Yes, score=8.9 required=5.0 tests=EMPTY_MESSAGE,MISSING_DATE,
	MISSING_HB_SEP,MISSING_HEADERS,MISSING_MID,MISSING_SUBJECT,NO_HEADERS_MESSAGE,
	NO_RECEIVED,NO_RELAYS,TVD_SPACE_RATIO autolearn=no version=3.2.4
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="----------=_47EFE290.76DEBF28"

This is a multi-part message in MIME format.

------------=_47EFE290.76DEBF28
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: 8bit

Spam detection software, running on the system "email.example.com", has
identified this incoming email as possible spam.  The original message
has been attached to this so you can view it (if it isn't spam) or label
similar future email.  If you have any questions, see
the administrator of that system for details.

Content preview:  [...]

Content analysis details:   (8.9 points, 5.0 required)

 pts rule name              description
---- ---------------------- --------------------------------------------------
 0.0 MISSING_MID            Missing Message-Id: header
 0.0 MISSING_DATE           Missing Date: header
-0.0 NO_RELAYS              Informational: message was not relayed via SMTP
 2.5 MISSING_HB_SEP         Missing blank line between message header and body
 1.6 MISSING_HEADERS        Missing To: header
 2.9 TVD_SPACE_RATIO        BODY: TVD_SPACE_RATIO
 1.3 MISSING_SUBJECT        Missing Subject: header
 0.6 EMPTY_MESSAGE          Message appears to have no textual parts and no
                            Subject: text
-0.0 NO_RECEIVED            Informational: message has no Received headers
 0.0 NO_HEADERS_MESSAGE     Message appears to be missing most RFC-822 headers

------------=_47EFE290.76DEBF28
Content-Type: message/rfc822; x-spam-type=original
Content-Description: original message before SpamAssassin
Content-Disposition: inline
Content-Transfer-Encoding: 8bit

blah

------------=_47EFE290.76DEBF28--
</code></pre>

My interest at the moment happens to be for non-email type filtering, so I'm
instead using this command:

    echo "blah" | spamc -c -d 127.0.0.1
    8.9/5.0

It just returns the "spamminess" ratio. Cool! The full message above is actually
quite helpful though because it explains why the score is what it is. For
non-email filtering, the ruleset would have to be drastically changed.

#### Bayesian Filtering

<pre><code>
sa-learn --dump magic
0.000          0          3          0  non-token data: bayes db version
0.000          0      43324          0  non-token data: nspam
0.000          0      11659          0  non-token data: nham
0.000          0     120837          0  non-token data: ntokens
0.000          0 1219602795          0  non-token data: oldest atime
0.000          0 1230660971          0  non-token data: newest atime
0.000          0 1230660975          0  non-token data: last journal sync atime
0.000          0 1230660980          0  non-token data: last expiry atime
0.000          0   11059200          0  non-token data: last expire atime delta
0.000          0      61857          0  non-token data: last expire reduction count
</code></pre>

I've had mediocre results with bayes, and really good results. The key is what
messages you feed into the database. Unfortunately, this is a relatively manual
process, though I wish it would be more automated. I also don't really
understand why spamassassin isn't more privy to using a single database for all
users, rather than individual bayes [[databases]] - simply because you need so
many messages to get a quality rating.

#### sa-learn
This is the command I currently use:

    sa-learn --spam -C /etc/mail/spamassassin --showdots --dir /home/savonix.com/home/spamdropboxsavonixcom/.maildir/.Spam/cur/

and of course for ham (non-spam):

    sa-learn --ham -C /etc/mail/spamassassin --showdots --dir /home/savonix.com/home/spamdropboxsavonixcom/.maildir/.Ham/cur/

#### sa-compile
This is a cool idea - it uses re2c to compile regular expression tests into
binary checks, making the tests faster. I simply ran "sa-compile" on [[debian]],
and then moved the uncompiled rules out of /var/lib/spamassassin to a backup
location.

#### Lint
Testing spamassassin is very helpful:

    spamassassin --lint -D

