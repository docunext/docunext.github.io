Apache 2 with mod_wsgi is a good way to run python under Apache. I finally got it going after a little confusion, and it feels pretty quick. The operation fits well with how I view web application processes, so that will help me get going with python faster. I'm trying to get [[pycoon]] going and this will definitely help.

I prefer to run mod_wsgi is daemon mode, like this:
<pre>
    WSGIDaemonProcess pyscripts processes=2 threads=5
    WSGIProcessGroup pyscripts
    WSGIScriptAlias /pyscripts /var/www/pyscripts
</pre>

The mod_wsgi documentation is really quite good, so I'm going to be reading more about it and I'll share my notes here.

Here's another example I 'm using:
<pre>
&lt;IfModule mod_wsgi.c>
    WSGIDaemonProcess mod_wsgi user=www-data group=www-data processes=2 threads=25
    WSGIPythonOptimize 1
    WSGIPythonHome  /usr/lib/python2.5
&lt;/IfModule>
</pre>

### My Experience with mod_wsgi
I love it. I just got through removing a wsgi server from sycaless and
instead hooked it up to mod_wsgi and it rocks. So simple and reliable. I did
have to change one header, but other than that it was a very simple switch.

### Developing with mod_wsgi
Developing with python has a couple of hurdles I had to jump over. First one was the include path;
<pre>
import sys, os.path
__directory__ = os.path.dirname(__file__)
sys.path.extend([os.path.abspath(__directory__)])
</pre>

With that in place I could start developing scripts wherever I wanted them.
I plan to put some thought into how I organize my wsgi applications, but I would
like to be able to hack something together quickly if I want to experiment and
try something out.
