This is an idea I've been milling over for awhile, seems like it should be
implemented on a very basic and fundamental level, probably in the
filesystem on a tmpfs.

### Description
So what is the idea? I got the gist of it from [[Fail2ban]] - its just a simple
time and trigger based incremental counter. For example, each time something
happens, a value gets incremented. After a certain amount of time, it
decrements. I think this should be implemented at the file system level because
so much is already there:

* atomicity with locking
* time stamps
* persistence (if desired)
* tree based organizational hierarchy (directories and files)

### Basic Shell Prototype
Start with this:

    echo 1 > key

Increment:

    cat key | awk '{print $1 + 1}' > key_ && mv key_ key && cat key

Decrement:

    cat key | awk '{print $1 - 1}' > key_ && mv key_ key && cat key

The practical use would obviously be different. I would like to use something
like this for user-land based process accounting. Not the fine granular process
accounting you'd find in the kernel space, but just for counting occurrences
of events, like connection attempts, service restarts, log events, or
configuration changes. I would consider it fair to describe it as process
macro-accounting with a lot of wiggle room.

By abstracting this function, services like monit, logwatch, and
fail2ban wouldn't need to provide it themselves, and the information could
even be shared amongst programs and hosts. Sure, different back-ends could be
used, but the point here is to be as light weight as possible.

Also, it would be nice to setup something like this with a REST interface:

    /counter/key/inc
    /counter/key/dec

### Existing Solutions
Monit's state management comment:

     *  Manage service information persistently. Service data is saved to
     *  a state file when monit runs in daemon mode for each poll
     *  cycle. Monit use this file to maintain service data persistently
     *  during reload or restart. The location of the state file may be
     * set from the command line or set in the monitrc file, if not set,
     * the default is ~/.monit.state.
