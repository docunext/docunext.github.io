A state machine compiler.

### Interesting!
Ragel is a very interesting program. The process starts with a "ragel file" (example.rl), which is a mix of ragel syntax and [[C]] code. Ragel then converts this to pure [[C]] code, which can then be compiled.

For my interests, the example [[rlscan.rl]] is the most intriguing. I'd like to write a state compiler for [[Markdown]] syntax. It could be used as a [[FastCGI]] application, or as an [[NGINX]] module.

### Questions
* Is there a library of ragel examples?
* Where does the name ragel come from?
* Why are the languages that it produces code for limited to the ones it has support for? For example, it cannot generate [[Perl]] code, but it can generate [[Ruby]] code. Maybe its time to return to [[Ruby]] programming. Maybe because, as the [http://www.ruby-lang.org/en/about/ Ruby site explains]:
<blockquote>Writing C extensions in Ruby is easier than in Perl or Python, with a very elegant API for calling Ruby from C. This includes calls for embedding Ruby in software, for use as a scripting language. A SWIG interface is also available.</blockquote>

### Comparison to XML and XSLT
Since I have more experience with [[XSLT]] than I do with language parsers, I am compelled to compare Ragel to how XSLT works on [[XML]]. Ragel appears to be able to create parsers for plain text files, using customized syntaxes.

### Related Pages
* [[Ragel Ruby]]
* [[Re2c]]
* [[Lex]]
* [[XSLT]]
* [[Treetop]]

### External Pages
* http://www.docunext.com/blog/2010/01/lets-use-flat-files-for-storage.html
* http://www.docunext.com/blog/2010/01/whats-up-ledger-xml-bnf-ragel-and-git.html
* http://wincent.com/a/about/wincent/weblog/archives/2008/02/ragel_wins_fata.php
* http://www.complang.org/ragel/
* [http://www.docunext.com/archives/ragel/ragel-6.3.html Backup copy of the ragel guide in HTML]