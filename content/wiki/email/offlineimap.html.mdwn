OfflineIMAP is a [[python]] script which can synchronize [[maildirs]] and
[[IMAP]] folders. I'm evaluating it as a way to potentially synchronize [[IMAP]]
servers.

I'm curious about how it does authentication though, from what I can tell it
doesn't look very flexible in that department, though with [[ssh]] it might be
OK.

### My Experience
I tried using both [[rsync]] and offlineimap together, but it doesn't work.
OfflineIMAP keeps track of what is has and hasn't done in a folder
".offlineimap". I tried it again tonight by itself and so far its working well.
I started slow using the filter options, as well as the ability to map the
remote directory names to something different locally.

I just tried using offineIMAP with the Machine.MachineUI interface and it indeed
prompts for a password, which can be provided via stdin, so I imagine that it
would be possible to create some sort of hook mechanism to initialize the sync
process.

It can also use an ssh tunnel, which is terrific! I don't really understand how
it chooses which .maildir to synchronize, but I think it passes a folder path to
the imapd service. So if a "user" like vmail has access to a number of emails,
it could synchronize them all periodically. No, I don't think that would work
well. I am now looking at having each user trigger the [[synchronization]].

### Conclusions Thus Far
OfflineIMAP is really quite nice. I think it may enable my goal of providing
redundant email service. I setup RoundCube to start an offlineimap process,
using sudo to switch user's. The www-data user is given NOPASSWD permission to
call only /usr/bin/offlineimap as the user that is logging in.

What if the user is logging in directly via IMAP or POP3? Would it be possible
to instantiate offlineimap as one of the users? In my postfix setup, the postfix
process runs the maildroprc script as each individual user, so it might be
possible to trigger the offlineimap script that way. However, in that case, the
user's password is not readily available.

This might be possible with [[Libpam-script]]. Actually it doesn't seem to be
happening... I'm not trying to use the preauth tunnel setup, which might be
doable. I tried using [[netcat]], and it works in a very limited manner, but it
appears that [[ssh]] is really the only tunnel which will work.

Actually this isn't a bad idea:

    ssh 192.168.8.12 "netcat -v -l -p 9132 -c '/usr/bin/imapd /home/docunext.com/home/docunextstaff/.maildir'" & sleep 2 && offlineimap

Still, how should it be triggered? It could be triggered by [[Libpam-script]],
even though I wasn't able to source the PAM_AUTHTOK for use with ssh.
[[Perdition]] might come in handy here, as it can rewrite and map usernames and
authenticate in a variety of ways (including [[PAM]]). Yes - it can be triggered
in a roundabout manner with pam-script.

See [/pam/Libpam-Script] for more details on this.

### Experiments
I'm tying OfflineIMAP with [[Python Psyco]] and it seems to be working well.
I've also enabled OfflineIMAP's autorefresh capability with quick updates and
that seems to help. Nope that didn't work either. Oh well.

I tried connecting OfflineIMAP to [[up-imapproxy]] but it didn't work. I had
holdopenconnection and keepalive on, so I'm turning those off and trying again.

### OfflineIMAP and [[Dovecot]]

~~~
[general]
accounts = Primary

[Account Primary]
localrepository = Local
remoterepository = Remote
autorefresh = 1

[Repository Local]
type = Maildir
localfolders = ~/.maildir

[Repository Remote]
type = IMAP
maxconnections = 1
remotehost =
remoteuser =
remotepass
nametrans = lambda foldername: re.sub('^INBOX\.*', '.', foldername)
folderfilter = lambda foldername: foldername in ['INBOX']
maxconnections = 1
holdconnectionopen = no
~~~

Mail executable:

~~~
#!/bin/sh
# a) Filesystem based timestamp in user's home directory
if fuser -s /usr/bin/offlineimap
then
    echo "noffline" > ~/logoffline
else
    echo "running" > ~/logoffline
    exec offlineimap -u Noninteractive.Quiet &
fi
#exec offlineimap -u Noninteractive.Quiet &
touch ~/.last_login
# b) SQL based tracking. Beware of potential SQL injection holes if you allow
# users to have ' characters in usernames.
#echo "update last_login = now WHERE user = '$USER'" | mysql mails
# Finally execute the imap/pop3 binary. If you use both, you'll need two scripts.
exec /usr/lib/dovecot/imap $*

~~~
