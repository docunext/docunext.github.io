### Summary
Ikiwiki is a [[wiki]] [[compiler]] written in [[Perl]] by [[Joey Hess]], a [[Debian]] developer. It converts wiki data into static [[HTML]] for publishing on the [[World Wide Web]] and can use [[Subversion]] or [[Git]] as the storage mechanism.

### Installing Ikiwiki
I finally am getting around to installing and trying out ikiwiki. Here are the dependencies my [[debian]] development server found:
<pre class="sh">
  ikiwiki libauthen-dechpwd-perl libauthen-passphrase-perl libcache-perl libcgi-formbuilder-perl libcgi-session-perl libclass-errorhandler-perl
  libcrypt-blowfish-perl libcrypt-des-perl libcrypt-dh-perl libcrypt-eksblowfish-perl libcrypt-mysql-perl libcrypt-passwdmd5-perl libcrypt-rijndael-perl
  libcrypt-unixcrypt-xs-perl libdata-entropy-perl libdata-float-perl libdigest-md4-perl libdigest-perl libfile-nfslock-perl libheap-perl
  libhtml-scrubber-perl liblwpx-paranoidagent-perl libmodule-runtime-perl libnet-openid-consumer-perl libparams-classify-perl libterm-readline-gnu-perl
  liburi-fetch-perl libxml-namespacesupport-perl libxml-parser-perl libxml-sax-expat-perl libxml-sax-perl libxml-simple-perl
</pre>

After installing, I am running:
<pre>
ikiwiki -setup /etc/ikiwiki/auto.setup
</pre>

I had to wrestle with [[Apache]] a little, but in the end I got it setup, and it only took five minutes. Here's my Apache configuration snibbet:
<pre>
Alias /ikiwiki/ /home/albertlash/public_html/testwiki/
<Directory /home/albertlash/public_html/testwiki/>
    Options +FollowSymLinks +ExecCGI
    AllowOverride All
    AddHandler CGI-Script .cgi
    order allow,deny
    allow from all
</Directory>
</pre>

I really liked this image too so I'm including a screenshot of it:

<img src="/s/img/2009/q1/20090320_ikiwiki_apache_conf.png"/>


### Configuring Ikiwiki
I'm venturing a little further into setting up Ikiwiki. What's in /etc/ikiwiki/auto.setup? It looks like a configuration hint file or something. I'm going to copy it and customize it. If possible, I plan to have a bunch of different wikis using remote [[subversion]] repository masters, publishing to a virtual host directory within the web server document root.

Here's what I've created from the auto.setup file:
<pre class="sh_perl">
require IkiWiki::Setup::Automator;

our $wikiname=IkiWiki::Setup::Automator::ask(
    gettext("What will the wiki be named?"), gettext("wiki"));
our $rcs=IkiWiki::Setup::Automator::ask(
    gettext("What revision control system to use?"), "svn");
our $admin=IkiWiki::Setup::Automator::ask(
    gettext("What wiki user (or openid) will be admin?"), $ENV{USER});
our $domain=IkiWiki::Setup::Automator::ask(
    gettext("What is the domain name of the web server?"), "");

IkiWiki::Setup::Automator->import(
    wikiname => $wikiname,
    adminuser => [$admin],
    rcs => $rcs,
    srcdir => "/var/www/virtual/$domain/wiki/src/$wikiname",
    destdir => "/var/www/virtual/$domain/public/wiki",
    repository => "/var/www/virtual/$domain/wiki/svn/$wikiname.".($rcs eq "monotone" ? "mtn" : $rcs),
    dumpsetup => "/var/www/virtual/$domain/wiki/$wikiname.setup",
    url => "http://$domain/wiki/",
    cgiurl => "http://$domain/$wikiname/ikiwiki.cgi",
    cgi_wrapper => "/var/www/virtual/$domain/public/wiki/ikiwiki.cgi",
    adminemail => "support\@example.com",
    add_plugins => [qw{goodstuff websetup}],
    disable_plugins => [qw{}],
    libdir => "/var/www/virtual/$domain/wiki/ikiwiki",
    rss => 1,
    prefix_directives => 1,
    atom => 1,
    syslog => 1,
)

</pre>

I added the directives prefix configuration option so I can have spaces in my wikilinks, as described here:

* http://ikiwiki.info/bugs/Spaces_in_link_text_for_ikiwiki_links/

### What's Next?
I have a few choices where to use Ikiwiki, but I'm going to hold off and make sure that I make the right choice. I've started a wiki for the [http://www.neocarz.com/blog/ NeoCarz.com] site, and I'm really liking Ikiwiki. Since it renders valid [[XHTML]], I am using [[NGINX]] and [[XSL]] to modify the output for public consumption and styling. I'm using a separate URL path for administering the content, and I'm running into a problem with the proxied links, so I'll use [[Nick Kew]]'s [[HTML]] [[proxy]] [[Apache2]] module to rewrite them, as I'm not using an XSL stylesheet for the admin paths. Yep, that works fine.

Yay! Ikiwiki with [[Apache]], [[NGINX]], [[XSL]] and the [[Okaytron]] styles are working out great! You can see some wikis I've setup and converted in action here:


<ul><li><a href="http://www.neocarz.com/wiki/" title="NeoCarz.com Automobile, Car, Truck and Motorcyce Wiki">NeoCarz.com Wiki</a></li>
<li><a href="http://www.sb-info.com/wiki/" title="Small Business Wiki">SB-Info.com Wiki</a></li></ul>


I've been focusing on the functionality and layout. The small business wiki has some decent content as I've been working on it with [[MediaWiki]] for quite some time. What's interesting too is that I'm converting [[XHTML]] to [[HTML]] 4 so that [[Google]] ads can be displayed.

Also of note, because I'm learning more and more [[Perl]] everyday, I've decided to try giving [[Catalyst]] a go. I've only installed it so far.

### Quick Review of Ikiwiki
Ikiwiki is really excellent. I'm very happy that I tried it out. Not only do I like that it uses [[Markdown]] and renders static files, I also really like the fact that it can use a revision system for storage, several different kinds in fact. That is really excellent for so many reasons.

I'll keep this Docunext Wiki in MediaWiki for the foreseeable future, but I have several smaller wikis which I plan to convert to Ikiwiki. If there isn't a script to automate the process already, I might try to scrap one up! Awesome, there is a [http://ikiwiki.info/tips/convert_mediawiki_to_ikiwiki/discussion/ page] on the ikiwiki site about this.

I'd also like to convert some wikis I have that are powered by [[Trac]] and [[Moinmoin]].

### Wiki Conversions
#### My Scrappy Way of Converting From [[MoinMoin]] to Ikiwiki
Not a good method; quick and dirty!
<pre>
find /usr/share/moin/wiki/data/pages/ > list
cat list | awk '{print $1"    "$1}' > list
</pre>
I manually converted the (20) spaces and stuff to underscores, but I have more moin wikis to convert so I'll try to find the [[regex]] to automate it. I also manually removed the paths from the second copy of the list, leaving just the page name.

<pre>
cat list | awk '{print "cp \""$1"\"    "tolower($2)".mdwn"}' > command_list
</pre>

Next step: import into [[Subversion]].

NOTE: This actually worked pretty well for me!

#### Converting from [[MediaWiki]] to Ikiwiki
My next goal is to convert from [[MediaWiki]] to Ikiwiki. There are some converter scripts for going to a [[git]] repository, so that's probably what I'll use.

I'm following [http://ikiwiki.info/tips/convert_mediawiki_to_ikiwiki/ these instructions] and have done this once before and wish I took notes!

I don't use namespaces, and have the [[MySQL]] [[Mediawiki]] database, so I'm using this [[SQL]] to get a list of pages:

<pre class="sh_sql">
SELECT page_title FROM page
</pre>

I went ahead and wrote up a [[Ruby]] script to manage the process for me:

http://github.com/docunext/mediawiki2gitikiwiki

### Plugins
I'm definitely interested in writing some plugins for Ikiwiki:

* http://ikiwiki.info/plugins/write/tutorial/

I'd like to do some basic text analysis on wiki pages, and then come up with some links to blog posts based on keywords searches.

UPDATE: I've actually written a plugin for ikiwiki! It uses the page name to search a [[Xapian]] database for related pages. Once its a little more refined I plan to release it as open source.

### Pages
* [[Private Wiki]]
* [[Perl]]
* [[MediaWiki]]
* [[Git-Wiki]]

### Links
* http://ikiwiki.info/
* http://ikiwiki.info/tips/convert_mediawiki_to_ikiwiki/discussion/
* http://ikiwiki.info/users/joshtriplett/

