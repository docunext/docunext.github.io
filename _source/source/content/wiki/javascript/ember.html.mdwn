I'm trying out Ember.js. So far, I like it, though the documentation could use some work.

I like it for the following reasons:

* The folks who are making it are involved with [[Ruby on Rails]]
* It does away with the boilerplate fluff that always annoyed me with hefty [[Javascript]] frameworks like [[YUI]] - if I understand correctly, its partly because of the nature of javascript.
* Its not done yet (as of October 2012) - yes, I like that part. I'm still forming my mental model of this paradigm so its where I want to be.
* It gives a lot more guidance to app creation, and I think the time is nigh for some best practices to be argued over and emerge.

I also like the handlebars template syntax - its different enough from the [[Ruby]] side of things that I won't get confused (hopefully!).

### Ember.js Components

#### The Router

I think I've figured out how the router works, and if I'm using it correctly, I'm really impressed. It makes it patching together different components of a user interface very straightforward and easy to understand. I am really digging this. The magic here as I see it is the connectOutlets capability, tying what is essentially a "yield" to a freshly instantiated controller. More specifically, if your template has something like this:

<pre>
{{outlet nav}}
</pre>

Then you can connect a specific controller / view combo to that outlet, like so:

<pre>
router.get('applicationController').connectOutlet('footer', 'footer');
</pre>

I'd almost __very__ roughly compare it to [[Drupal]]'s blocks concept.

#### Bindings

The way Ember.js incorporates bindings is very cool. In a nutshell, it provides the ability to point the value of a template variable to the value from an instance of a controller - and have that value auto-update in the template. The geeky part I like about this is how the controller instance gets called:

<pre>
App.router.get('awesomeController').content.get('name')
</pre>