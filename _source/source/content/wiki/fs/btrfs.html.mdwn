### Summary
A new developing [[filesystem]] under the [[GPL]]. I believe it is being sponsored by [[Oracle]] and is also contributed to by many other companies, including [[Intel]].

Along with [[ext4]], it is one of the newer filesystems for [[Linux]] that is going to herald the future of open source filesystems. As of 2011, it is still under active development.

#### Getting Started

First I'll format a partition and mount it:

<pre>
# mkfs.btrfs /dev/sdb2

WARNING! - Btrfs Btrfs v0.19 IS EXPERIMENTAL
WARNING! - see http://btrfs.wiki.kernel.org before using

fs created label (null) on /dev/sdb2
        nodesize 4096 leafsize 4096 sectorsize 4096 size 172.60GB
Btrfs Btrfs v0.19
</pre>

<pre>
# mount -o compress=lzo /dev/sdb2 /mnt
</pre>
Note the use of the "compress=lzo" option; I set that up-front so that any files I add will get compressed. I am thrilled about this feature because I've read it offers a performance boost in addition to transparently saving space.

Then I'll create a subvolume:

<pre>
# btrfs subvolume create /mnt/archives
Create subvolume '/mnt/archives'
</pre>

### Cool btrfs Features

#### RAID

This is my favorite feature. Right out of the box, btrfs supports RAID0, RAID1, and RAID10, with support planned for more levels. I've just setup a RAID0 with the default options which includes mirroring metadata and striping data.

What's interesting about this is that there is no new "device" created like with [[mdadm]] - you can mount either of the devices used in the creation. I'm using btrfs for [[LXC]], so here's a peek at my setup:

<pre>
# btrfs filesystem df /var/lib/lxc/
Data, RAID0: total=34.00GB, used=21.26GB
Data: total=8.00MB, used=0.00
System, RAID1: total=8.00MB, used=12.00KB
System: total=4.00MB, used=0.00
Metadata, RAID1: total=34.00GB, used=844.12MB
Metadata: total=8.00MB, used=0.00
</pre>

#### Subvolumes

Btrfs itself and specifically btrfs subvolumes can provide features similar to that of [[LVM]], but with some significant differences, and in my humble opinion, improvements. Seriously! I am really excited about btrfs subvolumes - they only take a moment to create, and are literally a snapshot of all the files of the source, and since subvolumes are pretty much like folders, the contents are available immediately. I've found myself making lots of subvolumes lately.

* Note: I've found myself not using the root of a btrfs volume, and only using subvolumes as mount points. That's given me some flexibility that I don't want to give up!

<pre>
btrfs subvolume create /mnt/volume/subvolume
</pre>

### See Also
* [[ZFS]]

### Links
* [http://www.docunext.com/blog/2009/02/lets-try-out-btrfs.html Let's Try out BTRFS]
* http://www.sanitarium.net/golug/rsync+btrfs_backups_2011.html
* http://www.funtoo.org/wiki/BTRFS_Fun

