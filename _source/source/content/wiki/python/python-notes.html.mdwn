### Python Variables
I think these are variables:
<pre>
__name__
</pre>

### Dictionaries
<pre>
blah = {"barf":"blah", "foo":"bar", "spam":"ham"}
</pre>

Dictionaries remind me of [[PHP]] arrays.

### Python Decorators
What are python decorators? The meaning of the term decorator in terms of python programming is still over my head, but here is a reference for its meaning: [http://www.python.org/dev/peps/pep-0318/#on-the-name-decorator On the name Decorator]. I just read more
of PEP 318, but I still don't really understand what decorators are. At least now I see that they are denoted by the "@" symbol.

### Python Lambdas
What are lambda functions? They are anonymous, meaning that they are not bound to a name. I'm not exactly sure what that means, but it sure sounds cool.

### Modules
I like how modules are very structured, and I think modules require __init.py__ inside the folder of each module. Makes sense. Actually its module packages that require the __init.py__ file.

(Moved Adding Google Analytics Code to Trac Templates to [[Trac]])

### Python Functions
In python, you create functions like this:
<pre>
def myFunction (arg1, arg2):
    return "hello"

# Then you can call the function like this:
myFunction("blah", "barf - these arguments are unused")

</pre>

### Python Built-In Class Functions
<pre>
__init__
</pre>
The __init__ function is like the constructor functions I've used in [[PHP]].  It is called when an object is created from a class.

<pre>
__call__
</pre>
The __call__ function is called by using the object name as a function reference. That probably doesn't make much sense. In other words, if you have a class, you can create an object from it. When that happens, the __init__ function is called. If the class has a __call__ function, the object can act as a function too.

### Lots of Python Notes
The time is definitely right for me to learn python. I continue to be concerned about performace, so I'll have to make http caching with trac a priority.

I really like the consistency I feel with it so far. That can be a huge help when learning and using something. Consistency makes me feel more comfortable.

The import statement really isn't as tough as I made it out to be.

<pre>
echo "a=[1,3,4]" > blah.py
python
>>> import blah
>>> import a from blah
>>> print a
[1,3,4]
</pre>

I'm definitely interested in wsgi, and from what I can tell, it seems a little like the php-cgi implementation. In php there are some standard variables passed alon gto the php scripts, like REQUEST_URI, HTTP_HOST, etc.

From dive into python:
"Python's URL library has no built-in support for last-modified date checking, but since you can add arbitrary headers to each request and read arbitrary headers in each response, you can add support for it yourself."

I've just been thinking a lot about the difference of how mod_fcgid runs trac.fcgi versus php5-cgi. php5-cgi runs as a wrapper for php scripts, but trac.fcgi runs itself as the primary gateway for all trac requests. This is nice is many ways; one example being that the configuration settings for an application can be instantiated once.

__init__.py
This file is required for modules?

I really like how python's syntax goes beyond the usual organization of characters - it includes spatial layout of code (indenting) as well as module organization - as it relates to folders, importing and file names (like __init__.py)

the magic triple quotes, pre-and-post double underscore. so much of important syntactical technical languages are determined by what is NOT likely to be used by a human - like __, <aslkjd>, etc. Funny? Yes.

In python, """ can be used for commenting """.

#### Python Logic
For dictionaries, you can use this instead of the in_array() / isset / is_array PHP functions:
<pre>
myDict = {"myKeyName","myValue"}
gotIt = myDict.get('myKeyName','defaultValue')
</pre>
Cool, huh?
A similar coding in [[PHP]] would be:
<pre>
$myArray = array('myKeyName' => 'myValue');
if(is_array($myArray)) {
    if(isset($myArray['myKeyName'])) {
        $gotIt = $myArray['myKeyName'];
    } else {
        $gotIt = 'default';
    }
}
</pre>

### Related Pages
* [[WSGI]]
* [[Apache 2 and mod_wsgi]]

### External Pages
* http://www.secnetix.de/olli/Python/lambda_functions.hawk

