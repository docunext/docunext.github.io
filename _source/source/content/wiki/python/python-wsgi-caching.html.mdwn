I'm using [[Beaker]] to provide caching, but the docs are a little sparse. Here's what I'm doing:

WSGI interface:
<pre>
application = CacheMiddleware(app_session, type='dbm', data_dir='/tmp/cache')
</pre>

Setup:
<pre>
    mynid = qs_dict.get('nid','index')[0]
    my_cache_key = mynid + environ["QUERY_STRING"]

    cache = environ['beaker.cache'].get_cache(my_cache_key)
</pre>

Retrieval / Storage:
<pre>
    try:
        output = cache.get_value('value') + '<!-- cached -->'
        content_type = cache.get_value('content_type')
        cache_control = cache.get_value('cache_control')
    except KeyError:
        myinit.process_gate(mynid)
        output = myinit.display()
        content_type  = myinit.content_type
        cache_control = myinit.cache_control
        cache.set_value('value', output)
        cache.set_value('content_type', content_type)
        cache.set_value('cache_control', cache_control)
</pre>

Expiration:
<pre>

    if( 'POST' in environ ):
        cache.clear()
</pre>

Out of context, this might be hard to understand. These snibbets are from [http://www.schematronic.com/blog/ Schematronic, a WSGI XML, XSL, SQL web application engine], check it out if you want to see the code in context.

