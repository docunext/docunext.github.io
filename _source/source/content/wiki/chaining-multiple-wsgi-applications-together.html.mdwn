### AKA "WSGI Middleware"

I'm not exactly sure how to do this, so I'm just going to give it a go.

In the WSGI request dispatcher (this is what I'm calling the script which gets called by Apache mod_wsgi), I'm easily able to pass the application object around, but behind that, there has to be a final function which is passed environ and start_response as arguments, so I'm not sure how to interface that function with anything else (modules, objects, functions), or if its a good idea to do so. Guess I'll try and see what happens.

### Application Passing
<pre>
def doNothing(application):
    return application

application = doNothing(application)
</pre>

### Request Passing
I'm not sure if request passing is the right term here, but this is what I'm up to:
<pre>
    def __call__(self, environ, start_reponse):
        return self.notcall(environ, start_reponse)


    def notcall(self, environ, start_response):
        response_headers = [('Content-type', 'text/html'),
                            ('Content-Length', str(len(output)))]
        start_response('200 OK', response_headers)

        return [output]
</pre>

At this stage, its starting to make a little more sense. Once past the instantiation, I would like to have a router of sorts, to call different functions or methods (kind of like object functions). Is that the same as connecting different WSGI applications / middleware together? It might be if all that it means to connect two WSGI components together is to pass (environ, start_response), then either pass it on further, or call start_response and return some output.

So in some ways the request lifecycle, or "anatomy of a request" is similar to the lifecycle of a cell. It starts out generalized, then starts to specialize over time.

### External Links
* http://wiki.pylonshq.com/display/pylonscookbook/Pylons+Execution+Analysis+0.9.6