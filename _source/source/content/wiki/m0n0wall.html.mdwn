### What is m0n0wall?
m0n0wall is an awesome, [[FreeBSD]] based, free [[firewall]] and [[router]] for embedded devices.

### M0n0wall development
There are a bunch of guides to build m0n0wall, these are my notes in using m0n0dev.php.

m0n0dev.php works within a FreeBSD jail (kind of like a virtual machine) by patching source code, building libraries and binaries, copying them into a target directory (as well as required system files and a kernel - handled by mkmini.pl and mklibs.pl), and then finally packaging up the target directory or directories into compressed disk images. This works great on FreeBSD because of the ports collection - instructions to build thousands of open source software projects, from subversion to mini_httpd.

What really impresses me about the m0n0wall building process is the following:
* a complete list of required files for a minimal FreeBSD system
* optimizations for a few embedded platforms
* a great webgui system

'''m0n0wall & m0n0dev.php links''':
* https://neon1.net/misc/minibsd/mkmini.pl
* http://askozia.com/m0n0dev
* http://www.ultradesic.com/index.php?section=125

Use the links above to build [[FreeBSD]] for m0n0wall development. You can do so using a virtual machine in Parallels, QEMU, or presumably VMWare. [http://www.docunext.com/2007/07/01/parallels-and-qemu-can-share/ I use Parallels on the Mac and QEMU on linux, and they can even use the same drive images as long as they are raw].

'''Setting up the MiniFreeBSD jail'''

Using cvsup to sync with the current sources takes a long time, and so does rebuilding the world, so I'm going to back my jail up (and my VM) once its done.

'''Using m0n0dev.php'''
# ./m0n0dev.php create blah
# ./m0n0dev.php build everything - do I only have to do this once? yes, I just created "barf" and then ran "./m0n0dev.php populate everything barf"
# ./m0n0dev.php populate everything blah
# ./m0n0dev.php package generic-pc 0.1 blah
# ls work/images/ - you should see generic-pc-0.1-blah.img

The resulting file tree when the command "m0n0dev.php create blah":
<pre>work/images/blah/
work/images/blah/lib
work/images/blah/bin
work/images/blah/cf
work/images/blah/conf.default
work/images/blah/dev
work/images/blah/etc
work/images/blah/etc/inc
work/images/blah/ftmp
work/images/blah/mnt
work/images/blah/libexec
work/images/blah/proc
work/images/blah/root
work/images/blah/sbin
work/images/blah/tmp
work/images/blah/usr
work/images/blah/usr/bin
work/images/blah/usr/lib
work/images/blah/usr/libexec
work/images/blah/usr/local
work/images/blah/usr/local/bin
work/images/blah/usr/local/captiveportal
work/images/blah/usr/local/lib
work/images/blah/usr/local/sbin
work/images/blah/usr/local/www
work/images/blah/usr/sbin
work/images/blah/usr/share
work/images/blah/var
work/images/blah/conf</pre>

'''Questions'''
When building everything, I get this warning:
<pre>===> -------------------------------------------------------------------------
#### > ATTENTION: You need a kernel patch to enable NAT-Traversal functionality!
#### > You can download the patch here:
#### >     http://ipsec-tools.sf.net/freebsd6-natt.diff
#### > You might possibly have to do some steps manually if it fails to apply.
#### > -------------------------------------------------------------------------</pre>

#### Automating m0n0wall Builds and Customizations ===

UPDATE: Check out [http://www.nodows.com/ NODOWS] for a new project I'm working on to build small [[Linux]] and [[FreeBSD]] systems.

'''Planned Changes to m0n0dev.php'''

I'd like to make some changes to m0n0dev, including the following:
* trimming it down, so that it can be adapted for many different purposes
* using a configuration file to make it easier to adapt for different purposes (would it be better to use something like phing?) YES! I really like this idea, this would make it much easier to build customized distributions of m0n0wall. Right now, it looks like there is a bunch of code that is highly co-dependent, like if you omit the captiveportal code, bad things will happen.
* introducing the idea of build or package modes, so you could build and package a development version with diagnostics, a debug version, a testing version, and of course a release version.
* switch to lighttpd instead of mini_httpd, already done by pfsense and freeNAS
* switch to php5, and add xsl and mysql or sqlite support
* bundle functionality groups into directories? they are currently all in the same root directory

It would be great to have an [[XML]] configuration file to use with m0n0dev.php to customize the m0n0wall build. For example, m0n0dev.php has a section for configuration of version numbers (among others):
<pre>
// --[ package versions ]------------------------------------------------------

$php_version = "php-4.4.6";
$radius_version = "radius-1.2.5";
$mini_httpd_version = "mini_httpd-1.19";
$wol_version = "wol-0.7.1";
$ez_ipupdate_version = "ez-ipupdate-3.0.11b8";
$bpalogin_version = "bpalogin-2.0.2";
$ucd_snmp_version = "ucd-snmp-4.2.7";
$mpd_version = "mpd-3.18";
$ipsec_tools_version = "ipsec-tools-0.6.6";
</pre>

It would be easier for the various projects to use the same m0n0dev script if this information was kept in a separate xml configuration file. But how would it get parsed? There are a bazillion ways, in fact,  there are some tools which are designed for tasks like this (building complex projects):

* phing (phing is not gnumake) - designed after ant, php-based, uses [[XML]] files for build tasks
* ant - java based, uses xml files for build tasks
* make - legendary GNU make, people love to complain about this guy. :-)

'''[http://www.phing.info Phing]'''

Phing is a natural choice for separating configuration from the functions in m0n0dev.php since it uses php and xml to work its magic (I also came up with the name!). Its been awhile since I took a look at phing, but I helped hack out the first version (though the newer one is really a completely separate and better implementation) for use with binarycloud, and then experimented with the second version when learning about symfony, creole, propel and those projects (all nice work by the way).

First I'll try to come up with a basic format for the xml file, and re-read some of the phing docs to double check if what I'm thinking about makes sense. Hmmm, it seems like a lot of m0n0dev.php could simply be converted to a phing build.xml file, and the special functionality required for patches and tasks could be made into phing tasks. Since there is still a lot of work done by the m0n0wall files (like mkmini.pl and mklibs.pl), I'll have to find out if it makes sense to port those over to php or what. perl can take awhile to build on freebsd.

Phing uses pear, so I have to figure out how to install it on [[FreeBSD]].

http://www.takizo.com/blog/2007/06/30/symfony-in-a-freebsd-box/

<pre>
cd /usr/ports/devel/pear
make install clean distclean</pre>

Actually, phing needs php5, so I have to install that as well:
<pre>cd /usr/ports/lang/php5
make install clean</pre>

OK - had to pkg_delete php4-4.4.7 to install php5 (and a bunch of others), then did the pear install, and the phing install. :-)

Just ran into a problem with php5 and phing on freebsd:
<pre>The extension 'zlib' couldn't be found.
Please make sure your version of PHP was built with 'zlib' support.</pre>

This gets fixed through the use of the php5-extensions port:
<pre>cd /usr/ports/lang/php5-extensions/
make install</pre>
Once you enter the command "make", you will be prompted with the various extensions you can build, make sure you choose zlib. I also chose [[MySQL]] and xsl while I was at it.

#### Phing-based m0n0dev buildfile
Here's a start, nothing too fancy quite yet:
<pre>
<?xml version="1.0"?>
<project name="m0n0dev" default="create" basedir=".">

    <property file="./build.properties"/>


    <target name="patch-kernel">
    </target>

    <target name="patch-bootloader">
        <exec command="cat files/libi386.patch" dir="." />
    </target>

    <target name="work">
        <mkdir dir="work"/>
    </target>

    <target name="create" depends="work">
        <mkdir dir="./work/${build.name}"/>
        <copy todir="./work/${build.name}/">
            <fileset dir="./files/skel/">
                <include name="**" />
                <exclude name=".svn"/>
            </fileset>
        </copy>
        <exec command="ln -s /cf/conf ./work/${build.name}/conf"/>
        <exec command="ln -s /var/run/htpasswd ./work/${build.name}/usr/local/www/.htpasswd"/>
    </target>

    <target name="captiveportal" depends="create">
        <mkdir dir="./work/${build.name}/usr/local/captiveportal/"/>
    </target>

</project>
</pre>

[[phing based m0n0wall build.xml]]

I just noticed this cool page on using phing with phpunit2:
[http://www.phpunit.de/pocket_guide/2.3/en/phing.html]

#### Testing and Debugging m0n0wall derived appliances
In working with m0n0wall, I'm frustrated with how hard it has been to debug and test.

Then I figured out it is possible to chroot to the rootfs of the image you are building like so:

<pre>
chroot work/images/test /bin/sh
</pre>

#### Abstracting and modularizing the conf file
Just figured out how m0n0wall services use the config.xml file to configure themselves. The xml parser actually writes a file to the filesystem before the service boots. In the case of m0n0jabber, the bootup script would write the djabberd section of the config.xml file to /usr/local/etc/djabberd.conf.

### m0n0wall Derivatives and Addons
#### Derivatives
* [[m0n0jabber]]
* [[askoziaPBX]]
* [[FreeNAS]]
* [[pfSense]]

#### Add-Ons
* [http://www.xs4all.nl/~fredmol/m0n0/ m0n0wall Utilities]

'''ideas for m0n0wall appliances'''
* [[QEMU]] virtual machine server (needs a lot more [[RAM]] than embedded devices usually have)
* [[PXE]] boot server using TFTP, [[NFS]], and [[DHCP]]
* Virtual host reverse proxy - currently pfSense features a load balancer for spreading incoming (as well as outgoing if I understand correctly) requests to several servers behind the firewall. This is done at the transport layer, and to achieve it at the application level (ie support for "routing" domains) you would need a reverse proxy server. Since pfsense includes lighttpd, it might just be feasible!

### Updated Instructions
* RELENG_6_2 jail
* build [[Subversion]]
* build [[PHP]]5 (cli + cgi)
* build php5-extensions (ctype, dom, filter, pcre, [[json]], simplexml, [[Zlib]], [[XML]], xmlreader, xsl - do we need all those?)
* build pear
* install [[phing]]
* checkout m0n0wall 6 sources ? or pfSense?

Then on to [[m0n0jabber]]