Here are a few example [[/lua]] scripts. 

### File I/O
Wow, reading and writing to a file is really easy!  As simple as:

~~~
file = io.open(tfile,"w")
file:write(data)
file:close()
~~~

### Strings
Strings can be multi-line if enclosed with dual square brackets:

~~~
mls = [[this
is a
string built over
multiple
lines
]]
~~~

### Email and Database Access
~~~
function check_email(email)
    if (email:match("[A-Za-z0-9%.%%%+%-]+@[A-Za-z0-9%.%%%+%-]+%.%w%w%w?%w?")) then
        return 1
    end
end

function send_email(myrcpt)
    local smtp = require("socket.smtp")
    from = "email@example.com"
    subj = "Confirming Email Signup"
    mailserv = "192.168.0.1"
    mailport = 587

    mesgt = {
        headers = {
            from = "Someone &lt;email@example.com>",
            to = "Admin &lt;"..myrcpt..">",
            subject = subj
        },
        body =    "Confirm Sign-up\n"
    }
    r, e = smtp.send{
        server = mailserv,
        port = mailport,
        from = from,
        rcpt = myrcpt,
        source = smtp.message(mesgt)
    }
    if (e) then
        io.stderr:write("Could not send email: ", e, "\n")
    end
end

function create_fan(req,con)

  local fan_email = req.POST.fan_email
  local fan_first_name = req.POST.fan_first_name
  local fan_last_name = req.POST.fan_last_name
  local fan_parental_consent = req.POST.fan_parental_consent

  assert (con:execute ("INSERT INTO fans (fan_email,fan_first_name,fan_last_name,fan_parental_consent,fan_source,fan_email_verified,fan_random_key) VALUES (LOWER('"..fan_email.."'),'"..fan_first_name.."','"..fan_last_name.."','"..fan_parental_consent.."','website_email_signup_form',-10,0)"))
  assert (con:execute ("UPDATE fans SET fan_random_key = CONCAT(CRC32(CONCAT(CONCAT(fan_first_name,fan_email),fan_created)),fan_id) WHERE fan_random_key=0;"))

    cursor = assert (con:execute ("SELECT fan_random_key FROM fans WHERE fan_email=LOWER('"..fan_email.."')"))

    for this_fan_random_key in rows (cursor, myquery) do
        fan_random_key = this_fan_random_key
    end

    return fan_random_key

end

function check_fan(req,con)

    local fan_email = req.POST.fan_email

    cursor = assert (con:execute ("SELECT fan_email FROM fans WHERE fan_email=LOWER('"..fan_email.."')"))

    myemail = 10

    for this_fan_email in rows (cursor, myquery) do
        myemail = this_fan_email
    end

    return myemail

end

function rows (cursor, sql_statement)
--  local cursor = assert (connection:execute (sql_statement))
  return function ()
    return cursor:fetch()
  end
end
~~~

~~~
#!/usr/bin/lua
function send_email(reqpost,fan_random_key)
local smtp = require("socket.smtp")
from = "&lt;user@example.com>"
--rcpt = {"&lt;user@example.com>"}
rcpt = { reqpost.fan_email }

mesgt = {
  headers = {
    to = "User <&lt;ser@example.com>",
    subject = "Confirm Mailing List Request"
  },

  body
"Someone, hopefully you, has submitted "..reqpost.fan_email.." to receive email\n"..
"updates.. To confirm this request, please click on this\n"..
"link:\n"..
"\n"..
"  http://www.example.com/c/fan-emails/verify/"..fan_random_key .."\n"..
"\n"..
"You can also copy and paste this link into a new browser window.\n"..
"If you did not make this request, just ignore or delete this email."

}
r, e = smtp.send{
  from = from,
  rcpt = rcpt,
  source = smtp.message(mesgt)
}
end
~~~


### Another Lua SQL Example

~~~
--[[ &lt;!--
Program: YoDNSConf
Component: domain_list.lua
Copyright: Savonix Corporation
Author: Albert L. Lash, IV
License: Gnu Affero Public License version 3
http://www.gnu.org/licenses

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program; if not, see http://www.gnu.org/licenses
or write to the Free Software Foundation, Inc., 51 Franklin Street,
Fifth Floor, Boston, MA 02110-1301 USA
--> --]]
require "luasql.mysql"
require "config"

env = assert (luasql.mysql())
con = assert (env:connect(dbconfig["database"],dbconfig["username"],dbconfig["password"],dbconfig["hostname"]))

function rows (connection, sql_statement)
  local cursor = assert (connection:execute (sql_statement))
  return function ()
    return cursor:fetch()
  end
end

for origin,ns,mbox,refresh,retry,minimum,ttl,expire,serial,id in rows (con, "select origin,ns,mbox,refresh,retry,minimum,ttl,expire,serial,id from soa WHERE serial>="..os.date("%Y%m%d00")) do
  myzone = "$ORIGIN "..origin.."\n".."$TTL 12h\n"
  myzone = myzone..origin.." IN SOA "..ns.." "..mbox.." ("
  myzone = myzone.."\n\t\t"..serial
  myzone = myzone.."\n\t\t"..refresh
  myzone = myzone.."\n\t\t"..retry
  myzone = myzone.."\n\t\t"..expire
  myzone = myzone.."\n\t\t"..minimum.."\n\t\t)"
  for name,data,ttl,type,aux,weight,port in rows (con, "select name,data,ttl,type,aux,weight,port from rr WHERE zone="..id) do
    myzone = myzone..name.." IN "..ttl.." "..type
    if (type == "MX") then
        myzone = myzone .." "..aux
    end
    if (type == "SRV") then
        myzone = myzone .." "..aux.." "..weight.." "..port
    end
    if (type == "TXT") then
        myzone = myzone .." \""..data.."\""
    else
        myzone = myzone.." "..data
    end
    myzone = myzone.."\n"
  end
  F = io.open("zones/"..origin.."zone.","w")
  F:write(string.format ("%s", myzone))
  F:close()
  --print (string.format ("%s", myzone))
end
~~~
