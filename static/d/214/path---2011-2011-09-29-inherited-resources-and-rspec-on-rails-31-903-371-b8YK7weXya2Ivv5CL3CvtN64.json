{"data":{"markdownRemark":{"html":"<p>I'm trying to use Rspec to test a Rails 3.1 application that uses Inherited Resources, but I keep getting these types of errors with spec:views :</p>\n<pre class=\"sh_ruby\">\n     Failure/Error: render\n     ActionView::Template::Error:\n       undefined local variable or method `resource' for #<#<Class:0xca64a94>:0xcb3bc88>\n</pre>\n<p>I believe it is in the way I am mocking objects:</p>\n<pre class=\"sh_ruby\">\n  4   it \"Renders payment form\" do\n  5     assign(:payment, stub_model(Payment))\n  6     render\n  7     view.should render_template(:partial => \"_form\", :count => 1)\n  8   end\n</pre>\n<p>That would result in an instance variable @payment getting set in a mock controller, but that's not what my views are using anymore - they are using <tt>resource</tt>.</p>\n<p>So what's a developer to do?</p>\n<p>I'm under the impression that this before block will do the trick:</p>\n<pre class=\"sh_ruby\">\n  before do\n    controller.singleton_class.class_eval do\n      protected\n        def collection\n          [Factory(:payment)]\n        end\n        def resource\n          Factory(:payment)\n        end\n        helper_method :resource, :collection\n    end\n  end\n</pre>\n<p>Its far from perfect, but it does kind of work. I ended up with something slightly different than that, but that's the idea.</p>\n<p>NOTE: Given that I'm using <strong>Factory</strong> there, it should be mentioned that I'm using factory_girl.</p>\n<ul>\n<li><a href=\"https://www.relishapp.com/rspec/rspec-rails/docs/view-specs/view-spec\">https://www.relishapp.com/rspec/rspec-rails/docs/view-specs/view-spec</a></li>\n</ul>","frontmatter":{"title":"Inherited Resources and Rspec on Rails 3.1","date":"September 29th, 2011"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2011/2011-09-29-inherited-resources-and-rspec-on-rails-31/"}}