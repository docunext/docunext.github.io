{"data":{"markdownRemark":{"html":"<p>This is an awesome gem, though I ran into many errors when I first started to try it out. Here's the code I was trying:</p>\n<pre class=\"sh_ruby\">\nrequire 'amazon/aws'\nrequire 'amazon/aws/search'\nrequire 'pp'\ninclude Amazon::AWS\ninclude Amazon::AWS::Search\nASSOCIATES_ID = \"removed\"\nKEY_ID = \"removed\"\n#req = Request.new(KEY_ID, ASSOCIATES_ID, 'us', false)\nis = ItemSearch.new( 'Books', { 'Title' => 'Ruby' } )\nis.response_group = ResponseGroup.new( :Small )\nreq = Request.new(KEY_ID, ASSOCIATES_ID, 'us', false)\nresp = req.search( is )\npp(resp.item_search_response)\npp(resp)\n</pre>\n<p>I first had trouble figuring out that I needed to put my AWS \"secret\" key in ~/.amazonrc.</p>\n<p>I was getting UTF-8 errors, too. I think adding this to my ~/.amazonrc fixed the problem:</p>\n<pre>\nencoding = 'UTF-8'\n</pre>\n<p>Hmmm. I guess using the cache also causes UTF-8 related errors.</p>\n<p>UPDATE: Finally, late last night I figured it out. The <a href=\"http://www.somelifeblog.com/2008/12/ruby-amazon-associates-web-services-aws.html\">example aaws code</a> I was basing my tests on uses ItemLookup.</p>\n<div>ItemLookup has an item_lookup_response object. When I switched to searching, item_lookup_response is not there. I eventually switched to item_search_response, but had cleared out the rest of the example for debugging. Adding it back in returned the right set.</div>\n<pre class=\"sh_ruby\">\nis = ItemSearch.new( 'Books', { 'Title' => 'Ruby' } )\nis.response_group = ResponseGroup.new( :Small )\nreq = Request.new(KEY_ID, ASSOCIATES_ID, 'us', true)\nresp = req.search( is )\nitem_sets = resp.item_search_response[0].items\n  item_sets[0..3].each do |item_set|\n  item_set.item.each do |item|\n    attribs = item.item_attributes[0]\n    puts attribs\n  end\nend\n</pre>\n<p>The way the secret key is handled seems odd. Maybe there is a better way? The ruby-aaws RDoc says its the only way though.</p>\n<p>UPDATE: There are different ways to set where the amazonrc file is. In my case, running unicorn via daemontools caused ENV['HOME'] to be nil, resulting in amazon.rb trying to evaluate ENV['HOMEDRIVE'] + ENV['HOMEPATH'], causing a NoMethodError that was very difficult to decipher (running unicorn with the \"-d\" option after invoking the Ruby interpreter helped track down the cause).</p>\n<p>I had tried setting $AMAZONRCFILE at first, then $AMAZONRCDIR, but that didn't work I noticed in amazon.rb that it was looking for ENV['AMAZONRCDIR'], so I set it in config.ru and voila - functionality!!</p>\n<p>UPDATE:</p>\n<p>I've send Ian an email:</p>\n<blockquote>\nHi Ian,\n<p>Nice work on the ruby-aaws gem. I'm using it with Sinatra and Unicorn,\nwhich is run by daemontools. For whatever reason, ENV['HOME'] was\nresulting in nil, causing it to try ENV['HOMEDRIVE'] + ENV['HOMEPATH'],\nwhich for me resulted in a NoMethodError.</p>\n<p>Setting ENV['AMAZONRCDIR'] fixed the issue for me, but perhaps you'd\nconsider putting an exception trap there, as the NoMethodError is so vague\nit was tough to track down.</p>\n<p>Thanks for this sweet gem!</p>\n<ul>\n<li>Albert</li>\n</ul>\n<p>PS - I've blogged about the gem, too:</p>\n<p><a href=\"http://www.docunext.com/blog/2010/03/ruby-gem-ruby-aaws.html\">http://www.docunext.com/blog/2010/03/ruby-gem-ruby-aaws.html</a></p>\n<p>Still not sure what the problem is with UTF-8 and caching....</p>\n<p>--</p>\n<p><a href=\"http://www.docunext.com/\">http://www.docunext.com/</a></p>\n</blockquote>\n<p>Â¥</p>","frontmatter":{"title":"Ruby Gem ruby aaws"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2010/2010-03-08-ruby-gem-ruby-aaws/"}}