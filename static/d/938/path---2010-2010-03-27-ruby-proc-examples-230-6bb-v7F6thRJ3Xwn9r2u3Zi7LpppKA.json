{"data":{"markdownRemark":{"html":"<h4>Fun With Ruby Procs!</h4>\n<p>If I understand correctly, procs are somewhat similar to anonymous, or lambda functions, in that they can be passed as arguments. They are also somewhat similar to function prototypes in that they can be bound to local variables, then called with new arguments.</p>\n<p>Abstract, yes. Useful, definitely!</p>\n<p>I don't use them everyday, but when I need them, they are often really useful. Especially when I am in the development process - I might not know exactly what I will need while I am writing code, and a proc is a really flexible placeholder to use as the logic evolves.</p>\n<p>Here's a basic Ruby proc example:</p>\n<pre class=\"sh_ruby\">\ndef blahblah(method)\n  return Proc.new { |string|\n    if method == 'reverse'\n      string.reverse\n    else\n      string.upcase\n    end\n  }\nend\nrme = blahblah('reverse')\nupme = blahblah('no')\nputs rme.call('howdy')\nputs upme.call('yo')\n</pre>\n<p>I need more practice with procs.</p>\n<p><a href=\"http://eli.thegreenplace.net/2006/04/18/understanding-ruby-blocks-procs-and-methods/\">Great article on Ruby Procs!</a></p>","frontmatter":{"title":"Ruby Proc Examples","date":"2010-03-27T00:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2010/2010-03-27-ruby-proc-examples/"}}