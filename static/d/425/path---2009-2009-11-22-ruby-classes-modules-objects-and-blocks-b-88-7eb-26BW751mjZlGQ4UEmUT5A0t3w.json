{"data":{"markdownRemark":{"html":"<p>I've just written up some notes on <a href=\"http://www.docunext.com/blog/2009/11/using-sinatra-on-debian-part-i.html\">running Sinatra on Debian over at Docunext</a>.</p>\n<p>While I finally got some Rack middleware operational between my Sinatra application and the Thin webserver, it took me too long to figure it out.</p>\n<p>I obviously need to get a better understanding of Ruby Classes, Modules, Objects and Blocks!</p>\n<p>Here's a class:</p>\n<pre class=\"sh_ruby\">\nclass Rclass\n    def initialize()\n        @barf = \"hi\"\n    end\n    def run()\n        puts @barf\n    end\nend\nbb = Rclass.new()\nbb.run()\n</pre>\n<p>OK, so that's a class, and with it we can create an object instance (\"bb\").</p>\n<p>What is a Ruby module? As I understand it, its where programming Ruby becomes much more Ruby-esque than other programming languages.</p>\n<p>Thankfully, <a href=\"http://www.rubyfleebie.com/an-introduction-to-modules-part-1/\">Ruby Fleebie has a nice tutorial on modules and mixins</a>. I've read it before, and its time for a review.</p>\n<p>Right - modules without the mixin capability is just an easy way to organize the different parts of a larger software program. Also noteworthy, it is possible to create classes within modules, like so:</p>\n<pre class=\"sh_ruby\">\nmodule BarfModule\n    class BarfClass\n        #...\n    end\nend\n</pre>\n<p>Reminiscent of perl, modules use the double colon syntax (\"::\") to reference module-specific code.</p>\n<p>Aha, now I remember why the tutorial from Ruby Fleebie didn't really sink in. The <a href=\"http://www.rubyfleebie.com/an-introduction-to-modules-part-2/\">explanation of module mixins in part II</a> is confusing to me.</p>\n<p>Let me try to find another tutorial and figure it out more clearly. This one does the trick:</p>\n<ul>\n<li><a href=\"http://juixe.com/techknow/index.php/2006/06/15/mixins-in-ruby/\">http://juixe.com/techknow/index.php/2006/06/15/mixins-in-ruby/</a></li>\n</ul>\n<p>This article is also helpful:</p>\n<ul>\n<li><a href=\"http://yehudakatz.com/2009/08/24/my-10-favorite-things-about-the-ruby-language/\">http://yehudakatz.com/2009/08/24/my-10-favorite-things-about-the-ruby-language/</a></li>\n</ul>\n<p>NOTE: Yehuda's favotire thing #5 is the approach I took when creating <a href=\"http://www.aortica.com/blog/\">Aortica, a web application framework written in Perl</a>. Its a cool notion: code that writes new code as it runs, then runs the new code it has written as appropriate. Nice, huh?</p>","frontmatter":{"title":"Ruby Classes Modules Objects and Blocks","date":"November 22nd, 2009"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2009/2009-11-22-ruby-classes-modules-objects-and-blocks/"}}