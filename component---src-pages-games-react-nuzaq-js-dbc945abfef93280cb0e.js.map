{"version":3,"file":"component---src-pages-games-react-nuzaq-js-dbc945abfef93280cb0e.js","mappings":"uLA0HA,MA1HA,WAC4B,oBAAbA,UAOf,WACI,IAYIC,EACAC,EAbAC,GAAY,EAEfC,EADSJ,SAASK,eAAe,YACpBC,WAAW,MACrBC,EAAQ,GACRC,EAAS,EAETC,EAAa,EACbC,EAAa,EACbC,EAAY,aACZC,EAAc,EACdC,EAAQ,GACRC,EAAY,GAGVC,EAAY,QACZC,EAAY,OACZC,EAAY,OACdC,EAAW,IAEf,SAASC,EAASC,EAAGC,EAAGC,GACpBlB,EAAImB,YACJnB,EAAIoB,KAAK,GAAKJ,EAAI,GAAG,GAAKC,EAAI,GAAG,GAAG,IACpCjB,EAAIqB,UAAYH,EAChBlB,EAAIkB,OACJlB,EAAIsB,YAER,SAASC,IACL1B,EAAS2B,KAAKC,MAAMD,KAAKE,SAAWvB,GACpCL,EAAS0B,KAAKC,MAAMD,KAAKE,SAAWtB,GACpCK,EAAMkB,SAAQ,SAACC,GACRA,EAAU,IAAM/B,GAAU+B,EAAU,IAAM9B,GACzCyB,OAGRR,EAASlB,EAAQC,EAAQa,GAE7B,SAASkB,IACL,IAAK,IAAIC,EAAI,EAAGA,EAAI1B,EAAQ0B,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAI5B,EAAO4B,IACvBhB,EAASgB,EAAGD,EAAGlB,GAI3B,SAASoB,IACLH,IACAN,IAIJ,SAASU,IACLC,IAEGC,MAAqBC,MACpBrB,EAASV,EAAYC,EAAYO,GAC7BJ,EAAM4B,OAAS7B,GAEfO,GADAL,EAAYD,EAAM6B,SACC,GAAI5B,EAAU,GAAIE,GAErCP,GAAcR,GAAUS,GAAcR,IACtCU,IACAe,MAbZS,IAkBA,IAAMO,EAAa,CACf,QAAW,CAAC,GAAG,GACf,UAAa,CAAC,EAAE,GAChB,UAAa,EAAE,EAAE,GACjB,WAAc,CAAC,EAAE,IAErB,SAASC,EAAaC,GACdA,EAAEC,KAAKC,WAAW,WAClBpC,EAAYkC,EAAEC,MAGtB,SAASR,IACXzB,EAAMmC,KAAK,CAACvC,EAAYC,IAClBD,GAA0BkC,EAAWhC,GAAW,GAChDD,GAA0BiC,EAAWhC,GAAW,GAEpD,SAAS4B,IACL,QACI9B,EAAa,GACbA,EAAaF,EAAQ,GACrBG,EAAa,GACbA,EAAaF,EAAS,KAEtByC,EAAS,kCACF,GAIf,SAAST,IAQL,OAPA3B,EAAMkB,SAAQ,SAACC,GAEX,GAAIA,EAAU,IAAMvB,GAAcuB,EAAU,IAAMtB,EAE9C,OADAuC,EAAS,0BACF,MAGR,EAEX,SAASA,EAASC,IACI,IAAd/C,IACAgD,cAAcC,GACdjD,GAAY,EACZkD,MAAM,cAAgBH,IAG9B,IAAIE,EAAeE,YAAYjB,EAAUnB,GACzClB,SAASuD,iBAAiB,QAASX,GArH3BY,ICCNC,EAAAA,SAAAA,GACJ,WAAYC,GAAQ,OAClB,YAAMA,IADW,MADfD,EAAAA,EAAAA,GAAAA,EAAAA,GAGH,kBAoBA,OApBA,EAEDE,kBAAA,WACEC,KACD,EAEDC,YAAA,WACED,KACD,EAEDE,OAAA,WACE,OACE,2BACA,wCACE,0BAAQC,GAAG,WAAWxD,MAAM,MAAMC,OAAO,QACzC,0BAAQwD,QAASC,KAAKJ,aAAtB,cACA,sHACA,kEAGL,EAvBGJ,CAAaS,EAAAA,WA0BnB,WAAe,GAAc,EAAXC,KAChB,OACE,gBAAC,IAAD,KACE,gBAACV,EAAD","sources":["webpack://docunext/./static/nuzaq.js","webpack://docunext/./src/pages/games/reactNuzaq.js"],"sourcesContent":["function gameInit() {\n    if( typeof document !== \"undefined\") {\n        return (function() {\n            _gameInit()\n        })()\n    }\n}\n\nfunction _gameInit() {\n    let _gameOver = false;\n\tlet canvas = document.getElementById(\"myCanvas\");\n\tlet ctx = canvas.getContext(\"2d\");\n    let width = 13;\n    let height = 9;\n\n    let snakeHeadX = 0;\n    let snakeHeadY = 0;\n    let direction = \"ArrowRight\";\n    let snakeLength = 3;\n    let snake = [];\n    let snakeTail = [];\n    let appleX;\n    let appleY;\n    const appleFill = \"#00ff\";\n    const emptyFill = \"#ddd\";\n    const snakeFill = \"#000\";\n    let interval = 150;\n\n    function drawCell(x, y, fill) {\n        ctx.beginPath();\n        ctx.rect(35 * x + 20,35 * y + 20,25,25);\n        ctx.fillStyle = fill;\n        ctx.fill();\n        ctx.closePath();\n    }\n    function drawApple() {\n        appleX = Math.floor(Math.random() * width);\n        appleY = Math.floor(Math.random() * height);\n        snake.forEach((snakeCell) => {\n            if(snakeCell[0] == appleX && snakeCell[1] == appleY) {\n                drawApple();\n            }\n        });\n        drawCell(appleX, appleY, appleFill)\n    }\n    function drawBoard() {\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n                drawCell(i, j, emptyFill)\n            }\n        }\n    }\n    function init() {\n        drawBoard();\n        drawApple();\n    }\n    init();\n\n    function drawGame() {\n        moveSnake();\n\n        if(isSnakeOnBoard() && !isSnakeBitingItself()) {\n            drawCell(snakeHeadX, snakeHeadY, snakeFill)\n            if (snake.length > snakeLength) {\n                snakeTail = snake.shift(); \n                drawCell(snakeTail[0], snakeTail[1], emptyFill)\n            }\n            if (snakeHeadX == appleX && snakeHeadY == appleY) {\n                snakeLength++;\n                drawApple();\n            }\n        }\n    }\n\n    const directions = {\n        \"ArrowUp\": [0,-1],\n        \"ArrowDown\": [0,1],\n        \"ArrowLeft\": [-1,0],\n        \"ArrowRight\": [1,0]\n    }\n    function setDirection(e) {\n        if (e.code.startsWith(\"Arrow\")) {\n            direction = e.code;\n        }\n    }\n    function moveSnake() {\n\t\tsnake.push([snakeHeadX, snakeHeadY]);\n        snakeHeadX = snakeHeadX + directions[direction][0];\n        snakeHeadY = snakeHeadY + directions[direction][1];\n    }\n    function isSnakeOnBoard() {\n        if (\n            snakeHeadX < 0 ||\n            snakeHeadX > width - 1 ||\n            snakeHeadY < 0 ||\n            snakeHeadY > height - 1\n        ) {\n            gameOver(\"The Snake went off the board!\");\n            return false;\n        }\n        return true\n    }\n    function isSnakeBitingItself() {\n        snake.forEach((snakeCell) => {\n            \n            if (snakeCell[0] == snakeHeadX && snakeCell[1] == snakeHeadY) {\n                gameOver(\"The Snake bit itself!\");\n                return true;\n            }\n        });\n        return false;\n    }\n    function gameOver(issue) {\n        if (_gameOver !== true) {\n            clearInterval(drawInterval);\n            _gameOver = true;\n            alert('GAME OVER: ' + issue);\n        }\n    }\n    let drawInterval = setInterval(drawGame, interval);\n    document.addEventListener('keyup', setDirection);\n}\nexport default gameInit;","import React from \"react\"\nimport Layout from \"../../components/layout\"\nimport gameInit from '../../../static/nuzaq'\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    gameInit()\n  }\n\n  restartGame() {\n    gameInit()\n  }\n\n  render() {\n    return (\n      <div>\n      <h1>Snake Game</h1>\n        <canvas id=\"myCanvas\" width=\"480\" height=\"360\"></canvas>\n        <button onClick={this.restartGame}>play again</button>\n        <p>This is the classic game snake written in JavaScript, and implemented via the CANVAS tag.</p>\n        <p>Its placed here via React / Gatsby.</p>\n      </div>\n    );\n  }\n}\n\nexport default ({ data }) => {\n  return (\n    <Layout>\n      <Game/>\n    </Layout>\n  )\n}\n"],"names":["document","appleX","appleY","_gameOver","ctx","getElementById","getContext","width","height","snakeHeadX","snakeHeadY","direction","snakeLength","snake","snakeTail","appleFill","emptyFill","snakeFill","interval","drawCell","x","y","fill","beginPath","rect","fillStyle","closePath","drawApple","Math","floor","random","forEach","snakeCell","drawBoard","j","i","init","drawGame","moveSnake","isSnakeOnBoard","isSnakeBitingItself","length","shift","directions","setDirection","e","code","startsWith","push","gameOver","issue","clearInterval","drawInterval","alert","setInterval","addEventListener","_gameInit","Game","props","componentDidMount","gameInit","restartGame","render","id","onClick","this","React","data"],"sourceRoot":""}